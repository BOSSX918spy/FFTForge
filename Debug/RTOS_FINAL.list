
RTOS_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d534  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080251d4  080251d4  00040060  2**0
                  CONTENTS
  4 .ARM          00000008  080251d4  080251d4  000351d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080251dc  080251dc  00040060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080251dc  080251dc  000351dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080251e0  080251e0  000351e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080251e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a508  20000060  08025244  00040060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a568  08025244  0004a568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000245c3  00000000  00000000  0004014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004716  00000000  00000000  0006470f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  00068e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5d  00000000  00000000  0006a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246eb  00000000  00000000  0006b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8b2  00000000  00000000  0008f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de0ec  00000000  00000000  000aa242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059dc  00000000  00000000  00188330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002fbb  00000000  00000000  0018dd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d0  00000000  00000000  00190d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c88 	.word	0x08007c88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007c88 	.word	0x08007c88

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	; 0x70
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fdfb 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f883 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f991 	bl	8000874 <MX_GPIO_Init>
  MX_DMA_Init();
 8000552:	f000 f96f 	bl	8000834 <MX_DMA_Init>
  MX_I2S3_Init();
 8000556:	f000 f8eb 	bl	8000730 <MX_I2S3_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f917 	bl	800078c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800055e:	f000 f93f 	bl	80007e0 <MX_USART3_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of audioQueue */
  arm_rfft_fast_init_f32(&fftInstance, 2048);
 8000562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <main+0xe8>)
 8000568:	f006 fa98 	bl	8006a9c <arm_rfft_fast_init_f32>

  /* Create FreeRTOS queues */
  audioQueue = xQueueCreate(2, sizeof(uint8_t));
 800056c:	2200      	movs	r2, #0
 800056e:	2101      	movs	r1, #1
 8000570:	2002      	movs	r0, #2
 8000572:	f004 fa9d 	bl	8004ab0 <xQueueGenericCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a2c      	ldr	r2, [pc, #176]	; (800062c <main+0xec>)
 800057a:	6013      	str	r3, [r2, #0]
  spectrumQueue = xQueueCreate(2, sizeof(uint8_t));
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2002      	movs	r0, #2
 8000582:	f004 fa95 	bl	8004ab0 <xQueueGenericCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <main+0xf0>)
 800058a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InputTask */
  osThreadDef(InputTask, StartInputTask, osPriorityNormal, 0, 128);
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <main+0xf4>)
 800058e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 80005a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f905 	bl	80047b6 <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a22      	ldr	r2, [pc, #136]	; (8000638 <main+0xf8>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ProcessingTask */
  osThreadDef(ProcessingTask, StartProcessingTask, osPriorityNormal, 0, 512);
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <main+0xfc>)
 80005b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingTaskHandle = osThreadCreate(osThread(ProcessingTask), NULL);
 80005c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f8f2 	bl	80047b6 <osThreadCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <main+0x100>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TransmissionTas */
  osThreadDef(TransmissionTas, StartTransmissionTask, osPriorityNormal, 0, 128);
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0x104>)
 80005da:	f107 041c 	add.w	r4, r7, #28
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmissionTasHandle = osThreadCreate(osThread(TransmissionTas), NULL);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f8df 	bl	80047b6 <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <main+0x108>)
 80005fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityIdle, 0, 128);
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0x10c>)
 8000600:	463c      	mov	r4, r7
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8000610:	463b      	mov	r3, r7
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f8ce 	bl	80047b6 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <main+0x110>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f004 f8c2 	bl	80047a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0xe4>
 8000626:	bf00      	nop
 8000628:	20002670 	.word	0x20002670
 800062c:	20000464 	.word	0x20000464
 8000630:	20000468 	.word	0x20000468
 8000634:	08007cac 	.word	0x08007cac
 8000638:	20000454 	.word	0x20000454
 800063c:	08007cd8 	.word	0x08007cd8
 8000640:	20000458 	.word	0x20000458
 8000644:	08007d04 	.word	0x08007d04
 8000648:	2000045c 	.word	0x2000045c
 800064c:	08007d28 	.word	0x08007d28
 8000650:	20000460 	.word	0x20000460

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 f9fe 	bl	8007a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006cc:	23c0      	movs	r3, #192	; 0xc0
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fefd 	bl	80034e0 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ec:	f000 faaa 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fe7c 	bl	800240c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 fa93 	bl	8000c44 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_I2S3_Init+0x54>)
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <MX_I2S3_Init+0x58>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2S3_Init+0x54>)
 800073c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000740:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_I2S3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_I2S3_Init+0x54>)
 8000756:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800075a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_I2S3_Init+0x54>)
 8000770:	f001 fb42 	bl	8001df8 <HAL_I2S_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800077a:	f000 fa63 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000031c 	.word	0x2000031c
 8000788:	40003c00 	.word	0x40003c00

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f003 fbcc 	bl	8003f60 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 fa39 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200003c4 	.word	0x200003c4
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART3_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000818:	f003 fba2 	bl	8003f60 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 fa0f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000040c 	.word	0x2000040c
 8000830:	40004800 	.word	0x40004800

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_DMA_Init+0x3c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <MX_DMA_Init+0x3c>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_DMA_Init+0x3c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	200b      	movs	r0, #11
 800085c:	f000 fd6a 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000860:	200b      	movs	r0, #11
 8000862:	f000 fd83 	bl	800136c <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <MX_GPIO_Init+0xb4>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xb4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_GPIO_Init+0xb4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0xb8>)
 8000900:	f001 fa46 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0xb8>)
 800091c:	f001 f8a4 	bl	8001a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <HAL_I2S_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  vTaskNotifyGiveFromISR(InputTaskHandle, &xHigherPriorityTaskWoken);
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_I2S_RxCpltCallback+0x3c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f107 020c 	add.w	r2, r7, #12
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fada 	bl	8005f00 <vTaskNotifyGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <HAL_I2S_RxCpltCallback+0x32>
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_I2S_RxCpltCallback+0x40>)
 8000954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	f3bf 8f6f 	isb	sy
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000454 	.word	0x20000454
 8000970:	e000ed04 	.word	0xe000ed04

08000974 <StartInputTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInputTask */
void StartInputTask(void const *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint8_t fillIndex = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  for (;;)
  {
    HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)audioBuffer[fillIndex], 2048);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	031b      	lsls	r3, r3, #12
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <StartInputTask+0x5c>)
 8000986:	4413      	add	r3, r2
 8000988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800098c:	4619      	mov	r1, r3
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <StartInputTask+0x60>)
 8000990:	f001 fb2a 	bl	8001fe8 <HAL_I2S_Receive_DMA>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	2001      	movs	r0, #1
 800099a:	f005 fa65 	bl	8005e68 <ulTaskNotifyTake>
    xQueueSend(audioQueue, &fillIndex, portMAX_DELAY);
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <StartInputTask+0x64>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f107 010f 	add.w	r1, r7, #15
 80009a6:	2300      	movs	r3, #0
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	f004 f8da 	bl	8004b64 <xQueueGenericSend>
    HAL_UART_Transmit(&huart3, (uint8_t *)audioBuffer[fillIndex], 20, HAL_MAX_DELAY); // Debug: Send first 10 samples
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	031b      	lsls	r3, r3, #12
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <StartInputTask+0x5c>)
 80009b6:	1899      	adds	r1, r3, r2
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	2214      	movs	r2, #20
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <StartInputTask+0x68>)
 80009c0:	f003 fb1e 	bl	8004000 <HAL_UART_Transmit>
    fillIndex = 1 - fillIndex;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	f1c3 0301 	rsb	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)audioBuffer[fillIndex], 2048);
 80009ce:	e7d7      	b.n	8000980 <StartInputTask+0xc>
 80009d0:	2000046c 	.word	0x2000046c
 80009d4:	2000031c 	.word	0x2000031c
 80009d8:	20000464 	.word	0x20000464
 80009dc:	2000040c 	.word	0x2000040c

080009e0 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
	static float32_t input[2048];
	  static float32_t output[2048];
	  uint8_t spectrumIndex = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	72fb      	strb	r3, [r7, #11]

	  for (;;)
	  {
	    uint8_t processIndex;
	    xQueueReceive(audioQueue, &processIndex, portMAX_DELAY);
 80009ec:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <StartProcessingTask+0x18c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f107 010a 	add.w	r1, r7, #10
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f9b1 	bl	8004d60 <xQueueReceive>

	    /* Convert 16-bit integer samples to float32_t */
	    for (int i = 0; i < 2048; i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a02:	e013      	b.n	8000a2c <StartProcessingTask+0x4c>
	    {
	      input[i] = (float32_t)audioBuffer[processIndex][i];
 8000a04:	7abb      	ldrb	r3, [r7, #10]
 8000a06:	495a      	ldr	r1, [pc, #360]	; (8000b70 <StartProcessingTask+0x190>)
 8000a08:	02da      	lsls	r2, r3, #11
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <StartProcessingTask+0x194>)
 8000a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 2048; i++)
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	3301      	adds	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a32:	dbe7      	blt.n	8000a04 <StartProcessingTask+0x24>
	    }

	    /* Perform real FFT */
	    arm_rfft_fast_f32(&fftInstance, input, output, 0);
 8000a34:	2300      	movs	r3, #0
 8000a36:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <StartProcessingTask+0x198>)
 8000a38:	494e      	ldr	r1, [pc, #312]	; (8000b74 <StartProcessingTask+0x194>)
 8000a3a:	4850      	ldr	r0, [pc, #320]	; (8000b7c <StartProcessingTask+0x19c>)
 8000a3c:	f006 f918 	bl	8006c70 <arm_rfft_fast_f32>

	    /* Compute magnitude spectrum, averaging every 8 bins into 128 values */
	    for (int group = 0; group < NUM_BINS; group++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a44:	e075      	b.n	8000b32 <StartProcessingTask+0x152>
	    {
	      float32_t sum = 0;
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
	      for (int j = 0; j < 8; j++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	e045      	b.n	8000ade <StartProcessingTask+0xfe>
	      {
	        int k = group * 8 + j;
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	6a3a      	ldr	r2, [r7, #32]
 8000a58:	4413      	add	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
	        float32_t mag;
	        if (k == 0)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d107      	bne.n	8000a72 <StartProcessingTask+0x92>
	        {
	          mag = fabsf(output[0]); /* DC component */
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <StartProcessingTask+0x198>)
 8000a64:	edd3 7a00 	vldr	s15, [r3]
 8000a68:	eef0 7ae7 	vabs.f32	s15, s15
 8000a6c:	edc7 7a07 	vstr	s15, [r7, #28]
 8000a70:	e02a      	b.n	8000ac8 <StartProcessingTask+0xe8>
	        }
	        else if (k == 1024)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a78:	d107      	bne.n	8000a8a <StartProcessingTask+0xaa>
	        {
	          mag = fabsf(output[1]); /* Nyquist component */
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <StartProcessingTask+0x198>)
 8000a7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a80:	eef0 7ae7 	vabs.f32	s15, s15
 8000a84:	edc7 7a07 	vstr	s15, [r7, #28]
 8000a88:	e01e      	b.n	8000ac8 <StartProcessingTask+0xe8>
	        }
	        else
	        {
	          float32_t real = output[2 * k];
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <StartProcessingTask+0x198>)
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
	          float32_t imag = output[2 * k + 1];
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a36      	ldr	r2, [pc, #216]	; (8000b78 <StartProcessingTask+0x198>)
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]
	          mag = sqrtf(real * real + imag * imag);
 8000aa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000abc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac0:	f007 f8c0 	bl	8007c44 <sqrtf>
 8000ac4:	ed87 0a07 	vstr	s0, [r7, #28]
	        }
	        sum += mag;
 8000ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000acc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	      for (int j = 0; j < 8; j++)
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	3301      	adds	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	2b07      	cmp	r3, #7
 8000ae2:	ddb6      	ble.n	8000a52 <StartProcessingTask+0x72>
	      }
	      sum /= 8;
 8000ae4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ae8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000af0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	      /* Scale and clip to 16-bit unsigned integer */
	      uint32_t val = (uint32_t)(sum * 0.1f);
 8000af4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000af8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000b80 <StartProcessingTask+0x1a0>
 8000afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b04:	ee17 3a90 	vmov	r3, s15
 8000b08:	61bb      	str	r3, [r7, #24]
	      if (val > 65535) val = 65535;
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b10:	d302      	bcc.n	8000b18 <StartProcessingTask+0x138>
 8000b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b16:	61bb      	str	r3, [r7, #24]
	      spectrumBuffer[spectrumIndex][group] = (uint16_t)val;
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	b290      	uxth	r0, r2
 8000b1e:	4919      	ldr	r1, [pc, #100]	; (8000b84 <StartProcessingTask+0x1a4>)
 8000b20:	01da      	lsls	r2, r3, #7
 8000b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b24:	4413      	add	r3, r2
 8000b26:	4602      	mov	r2, r0
 8000b28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    for (int group = 0; group < NUM_BINS; group++)
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	3301      	adds	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	2b7f      	cmp	r3, #127	; 0x7f
 8000b36:	dd86      	ble.n	8000a46 <StartProcessingTask+0x66>
	    }

	    HAL_UART_Transmit(&huart3, (uint8_t *)spectrumBuffer[spectrumIndex], 20, HAL_MAX_DELAY); // Debug: Send first 10 bins
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <StartProcessingTask+0x1a4>)
 8000b3e:	1899      	adds	r1, r3, r2
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2214      	movs	r2, #20
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <StartProcessingTask+0x1a8>)
 8000b48:	f003 fa5a 	bl	8004000 <HAL_UART_Transmit>
	    xQueueSend(spectrumQueue, &spectrumIndex, portMAX_DELAY);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <StartProcessingTask+0x1ac>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	f107 010b 	add.w	r1, r7, #11
 8000b54:	2300      	movs	r3, #0
 8000b56:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5a:	f004 f803 	bl	8004b64 <xQueueGenericSend>
	    spectrumIndex = 1 - spectrumIndex;
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	f1c3 0301 	rsb	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	72fb      	strb	r3, [r7, #11]
	  {
 8000b68:	e740      	b.n	80009ec <StartProcessingTask+0xc>
 8000b6a:	bf00      	nop
 8000b6c:	20000464 	.word	0x20000464
 8000b70:	2000046c 	.word	0x2000046c
 8000b74:	20002688 	.word	0x20002688
 8000b78:	20004688 	.word	0x20004688
 8000b7c:	20002670 	.word	0x20002670
 8000b80:	3dcccccd 	.word	0x3dcccccd
 8000b84:	2000246c 	.word	0x2000246c
 8000b88:	2000040c 	.word	0x2000040c
 8000b8c:	20000468 	.word	0x20000468

08000b90 <StartTransmissionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmissionTask */
void StartTransmissionTask(void const * argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmissionTask */
  /* Infinite loop */
	  for (;;)
	  {
	    uint8_t txIndex;
	    xQueueReceive(spectrumQueue, &txIndex, portMAX_DELAY);
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <StartTransmissionTask+0x60>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f107 0109 	add.w	r1, r7, #9
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f8db 	bl	8004d60 <xQueueReceive>

	    /* Transmit 128 16-bit values as 256 bytes */
	    for (int i = 0; i < NUM_BINS; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e01b      	b.n	8000be8 <StartTransmissionTask+0x58>
	    {
	      uint16_t val = spectrumBuffer[txIndex][i];
 8000bb0:	7a7b      	ldrb	r3, [r7, #9]
 8000bb2:	4910      	ldr	r1, [pc, #64]	; (8000bf4 <StartTransmissionTask+0x64>)
 8000bb4:	01da      	lsls	r2, r3, #7
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bbe:	817b      	strh	r3, [r7, #10]
	      uart_tx_buffer[0] = (val >> 8) & 0xFF; /* High byte */
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <StartTransmissionTask+0x68>)
 8000bca:	701a      	strb	r2, [r3, #0]
	      uart_tx_buffer[1] = val & 0xFF;        /* Low byte */
 8000bcc:	897b      	ldrh	r3, [r7, #10]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <StartTransmissionTask+0x68>)
 8000bd2:	705a      	strb	r2, [r3, #1]
	      HAL_UART_Transmit(&huart2, uart_tx_buffer, 2, HAL_MAX_DELAY);
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <StartTransmissionTask+0x68>)
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <StartTransmissionTask+0x6c>)
 8000bde:	f003 fa0f 	bl	8004000 <HAL_UART_Transmit>
	    for (int i = 0; i < NUM_BINS; i++)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	dde0      	ble.n	8000bb0 <StartTransmissionTask+0x20>
	  {
 8000bee:	e7d3      	b.n	8000b98 <StartTransmissionTask+0x8>
 8000bf0:	20000468 	.word	0x20000468
 8000bf4:	2000246c 	.word	0x2000246c
 8000bf8:	2000266c 	.word	0x2000266c
 8000bfc:	200003c4 	.word	0x200003c4

08000c00 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
	  for (;;)
	  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c08:	2120      	movs	r1, #32
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <StartLedTask+0x1c>)
 8000c0c:	f001 f8d9 	bl	8001dc2 <HAL_GPIO_TogglePin>
	    osDelay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f003 fe1b 	bl	800484e <osDelay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c18:	e7f6      	b.n	8000c08 <StartLedTask+0x8>
 8000c1a:	bf00      	nop
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 faa7 	bl	8001184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	f000 fb4d 	bl	8001334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0a2      	sub	sp, #136	; 0x88
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	225c      	movs	r2, #92	; 0x5c
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 fecb 	bl	8007a64 <memset>
  if(hi2s->Instance==SPI3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a59      	ldr	r2, [pc, #356]	; (8000e38 <HAL_I2S_MspInit+0x190>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	f040 80aa 	bne.w	8000e2e <HAL_I2S_MspInit+0x186>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fcd0 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000d0a:	f7ff ff9b 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a42      	ldr	r2, [pc, #264]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a3b      	ldr	r2, [pc, #236]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <HAL_I2S_MspInit+0x194>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**I2S3 GPIO Configuration
    PC1     ------> I2S3_SD
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d62:	2302      	movs	r3, #2
 8000d64:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000d74:	2305      	movs	r3, #5
 8000d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482f      	ldr	r0, [pc, #188]	; (8000e40 <HAL_I2S_MspInit+0x198>)
 8000d82:	f000 fe71 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d86:	2310      	movs	r3, #16
 8000d88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000da2:	4619      	mov	r1, r3
 8000da4:	4827      	ldr	r0, [pc, #156]	; (8000e44 <HAL_I2S_MspInit+0x19c>)
 8000da6:	f000 fe5f 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <HAL_I2S_MspInit+0x198>)
 8000dcc:	f000 fe4c 	bl	8001a68 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_I2S_MspInit+0x1a4>)
 8000dd4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dee:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e14:	f000 fab8 	bl	8001388 <HAL_DMA_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_I2S_MspInit+0x17a>
    {
      Error_Handler();
 8000e1e:	f7ff ff11 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_I2S_MspInit+0x1a0>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3788      	adds	r7, #136	; 0x88
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	20000364 	.word	0x20000364
 8000e4c:	40026010 	.word	0x40026010

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a41      	ldr	r2, [pc, #260]	; (8000f74 <HAL_UART_MspInit+0x124>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12c      	bne.n	8000ecc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a3f      	ldr	r2, [pc, #252]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a38      	ldr	r2, [pc, #224]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eba:	2307      	movs	r3, #7
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <HAL_UART_MspInit+0x12c>)
 8000ec6:	f000 fdcf 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eca:	e04f      	b.n	8000f6c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <HAL_UART_MspInit+0x130>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d14a      	bne.n	8000f6c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_UART_MspInit+0x128>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <HAL_UART_MspInit+0x134>)
 8000f46:	f000 fd8f 	bl	8001a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_UART_MspInit+0x138>)
 8000f68:	f000 fd7e 	bl	8001a68 <HAL_GPIO_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40004800 	.word	0x40004800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_InitTick+0xd4>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <HAL_InitTick+0xd4>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6453      	str	r3, [r2, #68]	; 0x44
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_InitTick+0xd4>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fb3c 	bl	8002640 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fc8:	f001 fb26 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_InitTick+0xd8>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_InitTick+0xdc>)
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_InitTick+0xe0>)
 8000fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_InitTick+0xdc>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_InitTick+0xdc>)
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0xdc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_InitTick+0xdc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_InitTick+0xdc>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <HAL_InitTick+0xdc>)
 8001008:	f002 fd08 	bl	8003a1c <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11b      	bne.n	8001052 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <HAL_InitTick+0xdc>)
 800101c:	f002 fd58 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800102a:	2b00      	cmp	r3, #0
 800102c:	d111      	bne.n	8001052 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800102e:	2019      	movs	r0, #25
 8001030:	f000 f99c 	bl	800136c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d808      	bhi.n	800104c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	2019      	movs	r0, #25
 8001040:	f000 f978 	bl	8001334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_InitTick+0xe4>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e002      	b.n	8001052 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001056:	4618      	mov	r0, r3
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	431bde83 	.word	0x431bde83
 8001068:	20006688 	.word	0x20006688
 800106c:	40010000 	.word	0x40010000
 8001070:	20000004 	.word	0x20000004

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA1_Stream0_IRQHandler+0x10>)
 80010a6:	f000 fa75 	bl	8001594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000364 	.word	0x20000364

080010b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ba:	f002 fd79 	bl	8003bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20006688 	.word	0x20006688

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010f0:	f7ff ffea 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800111a:	f006 fd07 	bl	8007b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fa0f 	bl	8000540 <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001130:	080251e4 	.word	0x080251e4
  ldr r2, =_sbss
 8001134:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001138:	2000a568 	.word	0x2000a568

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f8d8 	bl	800131e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff ff0c 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fd6c 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	200066d0 	.word	0x200066d0

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	200066d0 	.word	0x200066d0

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff4c 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001346:	f7ff ff61 	bl	800120c <__NVIC_GetPriorityGrouping>
 800134a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffb1 	bl	80012b8 <NVIC_EncodePriority>
 8001356:	4602      	mov	r2, r0
 8001358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff80 	bl	8001264 <__NVIC_SetPriority>
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff54 	bl	8001228 <__NVIC_EnableIRQ>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ff0a 	bl	80011ac <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e099      	b.n	80014d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c4:	e00f      	b.n	80013e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c6:	f7ff fef1 	bl	80011ac <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d908      	bls.n	80013e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2220      	movs	r2, #32
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e078      	b.n	80014d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e8      	bne.n	80013c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_DMA_Init+0x158>)
 8001400:	4013      	ands	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	2b04      	cmp	r3, #4
 800143e:	d107      	bne.n	8001450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4313      	orrs	r3, r2
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f023 0307 	bic.w	r3, r3, #7
 8001466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	4313      	orrs	r3, r2
 8001470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	2b04      	cmp	r3, #4
 8001478:	d117      	bne.n	80014aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00e      	beq.n	80014aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fa6f 	bl	8001970 <DMA_CheckFifoParam>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2240      	movs	r2, #64	; 0x40
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014a6:	2301      	movs	r3, #1
 80014a8:	e016      	b.n	80014d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fa26 	bl	8001904 <DMA_CalcBaseAndBitshift>
 80014b8:	4603      	mov	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	223f      	movs	r2, #63	; 0x3f
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	f010803f 	.word	0xf010803f

080014e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_DMA_Start_IT+0x26>
 8001506:	2302      	movs	r3, #2
 8001508:	e040      	b.n	800158c <HAL_DMA_Start_IT+0xa8>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d12f      	bne.n	800157e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f9b8 	bl	80018a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	223f      	movs	r2, #63	; 0x3f
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0216 	orr.w	r2, r2, #22
 8001552:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0208 	orr.w	r2, r2, #8
 800156a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e005      	b.n	800158a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001586:	2302      	movs	r3, #2
 8001588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800158a:	7dfb      	ldrb	r3, [r7, #23]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a0:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <HAL_DMA_IRQHandler+0x248>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a8e      	ldr	r2, [pc, #568]	; (80017e0 <HAL_DMA_IRQHandler+0x24c>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0a9b      	lsrs	r3, r3, #10
 80015ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2208      	movs	r2, #8
 80015ee:	409a      	lsls	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	2201      	movs	r2, #1
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2201      	movs	r2, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f043 0202 	orr.w	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2204      	movs	r2, #4
 800163c:	409a      	lsls	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d012      	beq.n	800166c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2204      	movs	r2, #4
 800165a:	409a      	lsls	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	2210      	movs	r2, #16
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d043      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03c      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2210      	movs	r2, #16
 8001690:	409a      	lsls	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d018      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d024      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
 80016c2:	e01f      	b.n	8001704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01b      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
 80016d4:	e016      	b.n	8001704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2220      	movs	r2, #32
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 808f 	beq.w	8001834 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8087 	beq.w	8001834 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2220      	movs	r2, #32
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b05      	cmp	r3, #5
 800173c:	d136      	bne.n	80017ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0216 	bic.w	r2, r2, #22
 800174c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800175c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_DMA_IRQHandler+0x1da>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0208 	bic.w	r2, r2, #8
 800177c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	223f      	movs	r2, #63	; 0x3f
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07e      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
        }
        return;
 80017aa:	e079      	b.n	80018a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01d      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10d      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d031      	beq.n	8001834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
 80017d8:	e02c      	b.n	8001834 <HAL_DMA_IRQHandler+0x2a0>
 80017da:	bf00      	nop
 80017dc:	20000000 	.word	0x20000000
 80017e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e01e      	b.n	8001834 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10f      	bne.n	8001824 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0210 	bic.w	r2, r2, #16
 8001812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	2b00      	cmp	r3, #0
 800183a:	d032      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d022      	beq.n	800188e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2205      	movs	r2, #5
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3301      	adds	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	d307      	bcc.n	800187c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f2      	bne.n	8001860 <HAL_DMA_IRQHandler+0x2cc>
 800187a:	e000      	b.n	800187e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800187c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e000      	b.n	80018a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018a0:	bf00      	nop
    }
  }
}
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b40      	cmp	r3, #64	; 0x40
 80018d4:	d108      	bne.n	80018e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018e6:	e007      	b.n	80018f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3b10      	subs	r3, #16
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <DMA_CalcBaseAndBitshift+0x64>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <DMA_CalcBaseAndBitshift+0x68>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d909      	bls.n	8001946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
 8001944:	e007      	b.n	8001956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	aaaaaaab 	.word	0xaaaaaaab
 800196c:	08007d64 	.word	0x08007d64

08001970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d856      	bhi.n	8001a3e <DMA_CheckFifoParam+0xce>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <DMA_CheckFifoParam+0x28>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019bb 	.word	0x080019bb
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	08001a3f 	.word	0x08001a3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d046      	beq.n	8001a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e043      	b.n	8001a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c2:	d140      	bne.n	8001a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e03d      	b.n	8001a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d2:	d121      	bne.n	8001a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d837      	bhi.n	8001a4a <DMA_CheckFifoParam+0xda>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x70>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	080019f7 	.word	0x080019f7
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a09 	.word	0x08001a09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      break;
 80019f4:	e030      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d025      	beq.n	8001a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a06:	e022      	b.n	8001a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a10:	d11f      	bne.n	8001a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a16:	e01c      	b.n	8001a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d903      	bls.n	8001a26 <DMA_CheckFifoParam+0xb6>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d003      	beq.n	8001a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a24:	e018      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2a:	e015      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e00b      	b.n	8001a56 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e00a      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e008      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e006      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
    }
  } 
  
  return status; 
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e165      	b.n	8001d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8154 	bne.w	8001d4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80ae 	beq.w	8001d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a5c      	ldr	r2, [pc, #368]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4f      	ldr	r2, [pc, #316]	; (8001d70 <HAL_GPIO_Init+0x308>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_Init+0x21a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4e      	ldr	r2, [pc, #312]	; (8001d74 <HAL_GPIO_Init+0x30c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_Init+0x216>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x310>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <HAL_GPIO_Init+0x314>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_GPIO_Init+0x318>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x20a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_GPIO_Init+0x31c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x206>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a49      	ldr	r2, [pc, #292]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x202>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x21c>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae96 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0e1      	b.n	8001fce <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a6d      	ldr	r2, [pc, #436]	; (8001fd8 <HAL_I2S_Init+0x1e0>)
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe ff3f 	bl	8000ca8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e40:	f023 030f 	bic.w	r3, r3, #15
 8001e44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d06f      	beq.n	8001f36 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e5e:	2310      	movs	r3, #16
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e001      	b.n	8001e68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d802      	bhi.n	8001e76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_I2S_Init+0x1e4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_I2S_Init+0x92>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_I2S_Init+0x1e8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d104      	bne.n	8001e94 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 ff34 	bl	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	e003      	b.n	8001e9c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f000 ff2f 	bl	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e9a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea4:	d125      	bne.n	8001ef2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	3305      	adds	r3, #5
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e01f      	b.n	8001f10 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	3305      	adds	r3, #5
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e00e      	b.n	8001f10 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	3305      	adds	r3, #5
 8001f0e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_I2S_Init+0x1ec>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e003      	b.n	8001f3e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d902      	bls.n	8001f4a <HAL_I2S_Init+0x152>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d907      	bls.n	8001f5a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e039      	b.n	8001fce <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	ea42 0103 	orr.w	r1, r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f78:	f023 030f 	bic.w	r3, r3, #15
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6851      	ldr	r1, [r2, #4]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6892      	ldr	r2, [r2, #8]
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6992      	ldr	r2, [r2, #24]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d003      	beq.n	8001fae <HAL_I2S_Init+0x1b6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2bb0      	cmp	r3, #176	; 0xb0
 8001fac:	d107      	bne.n	8001fbe <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fbc:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	080022f9 	.word	0x080022f9
 8001fdc:	40003800 	.word	0x40003800
 8001fe0:	40003c00 	.word	0x40003c00
 8001fe4:	cccccccd 	.word	0xcccccccd

08001fe8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_I2S_Receive_DMA+0x1a>
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e09d      	b.n	8002142 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	e095      	b.n	8002142 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_I2S_Receive_DMA+0x3e>
 8002022:	2302      	movs	r3, #2
 8002024:	e08d      	b.n	8002142 <HAL_I2S_Receive_DMA+0x15a>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2204      	movs	r2, #4
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d002      	beq.n	800205a <HAL_I2S_Receive_DMA+0x72>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d10a      	bne.n	8002070 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	865a      	strh	r2, [r3, #50]	; 0x32
 800206e:	e005      	b.n	800207c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_I2S_Receive_DMA+0x164>)
 8002082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_I2S_Receive_DMA+0x168>)
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_I2S_Receive_DMA+0x16c>)
 8002092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020a2:	d10a      	bne.n	80020ba <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	330c      	adds	r3, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80020d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80020d2:	f7ff fa07 	bl	80014e4 <HAL_DMA_Start_IT>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00f      	beq.n	80020fc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	f043 0208 	orr.w	r2, r3, #8
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e022      	b.n	8002142 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	080021d7 	.word	0x080021d7
 8002150:	08002195 	.word	0x08002195
 8002154:	080021f3 	.word	0x080021f3

08002158 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10e      	bne.n	80021c8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7fe fbb1 	bl	8000930 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff ffc1 	bl	800216c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0203 	bic.w	r2, r2, #3
 800220e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0208 	orr.w	r2, r3, #8
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff ffa5 	bl	8002180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10e      	bne.n	8002292 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002282:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff63 	bl	8002158 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	b292      	uxth	r2, r2
 80022ae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fb20 	bl	8000930 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b04      	cmp	r3, #4
 8002312:	d13a      	bne.n	800238a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d109      	bne.n	8002332 <I2S_IRQHandler+0x3a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d102      	bne.n	8002332 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffb4 	bl	800229a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d126      	bne.n	800238a <I2S_IRQHandler+0x92>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b20      	cmp	r3, #32
 8002348:	d11f      	bne.n	800238a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002358:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0202 	orr.w	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fefb 	bl	8002180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d136      	bne.n	8002404 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d109      	bne.n	80023b4 <I2S_IRQHandler+0xbc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d102      	bne.n	80023b4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff45 	bl	800223e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <I2S_IRQHandler+0x10c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d11b      	bne.n	8002404 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023da:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff febe 	bl	8002180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0cc      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d90c      	bls.n	8002448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d044      	beq.n	800252c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e067      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fe56 	bl	80011ac <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7fe fe52 	bl	80011ac <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e04f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d20c      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002592:	f000 fdfb 	bl	800318c <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fcea 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08007d4c 	.word	0x08007d4c
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08007d5c 	.word	0x08007d5c

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08007d5c 	.word	0x08007d5c

08002640 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	220f      	movs	r2, #15
 800264e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_GetClockConfig+0x5c>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCC_GetClockConfig+0x5c>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_RCC_GetClockConfig+0x5c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_GetClockConfig+0x5c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <HAL_RCC_GetClockConfig+0x60>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	601a      	str	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026dc:	4b6f      	ldr	r3, [pc, #444]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	496c      	ldr	r1, [pc, #432]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026fa:	2301      	movs	r3, #1
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002710:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	4960      	ldr	r1, [pc, #384]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4955      	ldr	r1, [pc, #340]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002756:	d101      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002774:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	4946      	ldr	r1, [pc, #280]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002792:	d101      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 808a 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ce:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027da:	f7fe fce7 	bl	80011ac <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fce3 	bl	80011ac <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e278      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002808:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02f      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	429a      	cmp	r2, r3
 800281c:	d028      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d114      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fcb1 	bl	80011ac <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fcad 	bl	80011ac <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e240      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800287c:	d114      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	4902      	ldr	r1, [pc, #8]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
 8002898:	e00c      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42470e40 	.word	0x42470e40
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	4944      	ldr	r1, [pc, #272]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028da:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4937      	ldr	r1, [pc, #220]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800290a:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002910:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002918:	492e      	ldr	r1, [pc, #184]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d011      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	4926      	ldr	r1, [pc, #152]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294a:	d101      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002962:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	491a      	ldr	r1, [pc, #104]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	4911      	ldr	r1, [pc, #68]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800299c:	d101      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800299e:	2301      	movs	r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d005      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b0:	f040 80ff 	bne.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fbf7 	bl	80011ac <HAL_GetTick>
 80029be:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029c0:	e00e      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029c2:	f7fe fbf3 	bl	80011ac <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d907      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e188      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	424711e0 	.word	0x424711e0
 80029dc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ea      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d028      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d124      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a14:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	3301      	adds	r3, #1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2c:	0e1b      	lsrs	r3, r3, #24
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	3b01      	subs	r3, #1
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	4961      	ldr	r1, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d035      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a88:	d130      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a8a:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa2:	0f1b      	lsrs	r3, r3, #28
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	019b      	lsls	r3, r3, #6
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	071b      	lsls	r3, r3, #28
 8002acc:	4943      	ldr	r1, [pc, #268]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ada:	f023 021f 	bic.w	r2, r3, #31
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	493d      	ldr	r1, [pc, #244]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d029      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b00:	d124      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	0f1b      	lsrs	r3, r3, #28
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	071b      	lsls	r3, r3, #28
 8002b44:	4925      	ldr	r1, [pc, #148]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d016      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	071b      	lsls	r3, r3, #28
 8002b7e:	4917      	ldr	r1, [pc, #92]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fb0e 	bl	80011ac <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b94:	f7fe fb0a 	bl	80011ac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e09f      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8095 	bne.w	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe faf4 	bl	80011ac <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bc6:	e00f      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bc8:	f7fe faf0 	bl	80011ac <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d908      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e085      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	42470068 	.word	0x42470068
 8002be4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002be8:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf4:	d0e8      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d02b      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d127      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	4928      	ldr	r1, [pc, #160]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	3b01      	subs	r3, #1
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01d      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c82:	d118      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	0e1b      	lsrs	r3, r3, #24
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	4910      	ldr	r1, [pc, #64]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fa76 	bl	80011ac <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cc4:	f7fe fa72 	bl	80011ac <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e007      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce2:	d1ef      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3730      	adds	r7, #48	; 0x30
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470070 	.word	0x42470070

08002cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	f200 8224 	bhi.w	800316a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002f2b 	.word	0x08002f2b
 8002d2c:	08003055 	.word	0x08003055
 8002d30:	0800316b 	.word	0x0800316b
 8002d34:	08002d49 	.word	0x08002d49
 8002d38:	0800316b 	.word	0x0800316b
 8002d3c:	0800316b 	.word	0x0800316b
 8002d40:	0800316b 	.word	0x0800316b
 8002d44:	08002d49 	.word	0x08002d49
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002d48:	4ba8      	ldr	r3, [pc, #672]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d5e:	f000 80d6 	beq.w	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d68:	f200 80dd 	bhi.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d72:	f000 809f 	beq.w	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d7c:	f200 80d3 	bhi.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8e:	f200 80ca 	bhi.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d98:	f000 80b6 	beq.w	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002da2:	f200 80c0 	bhi.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dac:	f000 8082 	beq.w	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db6:	f200 80b6 	bhi.w	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc6:	d03b      	beq.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8002dc8:	e0ad      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e008      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8002dea:	4b80      	ldr	r3, [pc, #512]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df4:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8002e0a:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	fb03 f202 	mul.w	r2, r3, r2
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8002e24:	4b71      	ldr	r3, [pc, #452]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
          break;
 8002e3e:	e073      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e4c:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e56:	4a66      	ldr	r2, [pc, #408]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002e60:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6a:	4a62      	ldr	r2, [pc, #392]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002e72:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8002e80:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	fb03 f202 	mul.w	r2, r3, r2
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]
          break;
 8002eb2:	e039      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d108      	bne.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec8:	4a49      	ldr	r2, [pc, #292]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eda:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0f1b      	lsrs	r3, r3, #28
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	61fb      	str	r3, [r7, #28]
          break;
 8002f06:	e00f      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002f0a:	61fb      	str	r3, [r7, #28]
          break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002f1c:	61fb      	str	r3, [r7, #28]
          break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002f20:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002f22:	61fb      	str	r3, [r7, #28]
          break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002f26:	bf00      	nop
        }
      }
      break;
 8002f28:	e120      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f30:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002f3c:	d079      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002f44:	f200 8082 	bhi.w	800304c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f4e:	d03c      	beq.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f56:	d879      	bhi.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f64:	d172      	bne.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002f68:	61fb      	str	r3, [r7, #28]
          break;
 8002f6a:	e072      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f78:	d109      	bne.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
          break;
 8002fc8:	e043      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e010      	b.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	017d7840 	.word	0x017d7840
 8002ff8:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ffc:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003004:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800300c:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0f1b      	lsrs	r3, r3, #28
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	61fb      	str	r3, [r7, #28]
          break;
 8003030:	e00f      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003032:	4b52      	ldr	r3, [pc, #328]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303e:	d102      	bne.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003042:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003044:	e005      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003046:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003048:	61fb      	str	r3, [r7, #28]
          break;
 800304a:	e002      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
          break;
 8003050:	bf00      	nop
        }
      }
      break;
 8003052:	e08b      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003054:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003066:	d06f      	beq.n	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800306e:	d878      	bhi.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003076:	d03c      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800307e:	d870      	bhi.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d169      	bne.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8003090:	61fb      	str	r3, [r7, #28]
          break;
 8003092:	e069      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d109      	bne.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ac:	4a35      	ldr	r2, [pc, #212]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80030b6:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80030c8:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80030de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e2:	0f1b      	lsrs	r3, r3, #28
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]
          break;
 80030f0:	e03a      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fe:	d108      	bne.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e007      	b.n	8003122 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0f1b      	lsrs	r3, r3, #28
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	61fb      	str	r3, [r7, #28]
          break;
 8003146:	e00f      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003154:	d102      	bne.n	800315c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003158:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800315e:	61fb      	str	r3, [r7, #28]
          break;
 8003160:	e002      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
          break;
 8003166:	bf00      	nop
        }
      }
      break;
 8003168:	e000      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 800316a:	bf00      	nop
    }
  }
  return frequency;
 800316c:	69fb      	ldr	r3, [r7, #28]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400
 8003184:	017d7840 	.word	0x017d7840
 8003188:	00bb8000 	.word	0x00bb8000

0800318c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003190:	b0a6      	sub	sp, #152	; 0x98
 8003192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b2:	4bc8      	ldr	r3, [pc, #800]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	f200 817e 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x330>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	080034bd 	.word	0x080034bd
 80031d0:	080034bd 	.word	0x080034bd
 80031d4:	080034bd 	.word	0x080034bd
 80031d8:	08003205 	.word	0x08003205
 80031dc:	080034bd 	.word	0x080034bd
 80031e0:	080034bd 	.word	0x080034bd
 80031e4:	080034bd 	.word	0x080034bd
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	080034bd 	.word	0x080034bd
 80031f0:	080034bd 	.word	0x080034bd
 80031f4:	080034bd 	.word	0x080034bd
 80031f8:	08003377 	.word	0x08003377
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4bb6      	ldr	r3, [pc, #728]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003202:	e15f      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003204:	4bb5      	ldr	r3, [pc, #724]	; (80034dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800320a:	e15b      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4bb1      	ldr	r3, [pc, #708]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003218:	4bae      	ldr	r3, [pc, #696]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003224:	4bab      	ldr	r3, [pc, #684]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	2200      	movs	r2, #0
 800322c:	66bb      	str	r3, [r7, #104]	; 0x68
 800322e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
 8003238:	2300      	movs	r3, #0
 800323a:	667b      	str	r3, [r7, #100]	; 0x64
 800323c:	4ba7      	ldr	r3, [pc, #668]	; (80034dc <HAL_RCC_GetSysClockFreq+0x350>)
 800323e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003242:	462a      	mov	r2, r5
 8003244:	fb03 f202 	mul.w	r2, r3, r2
 8003248:	2300      	movs	r3, #0
 800324a:	4621      	mov	r1, r4
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	4aa2      	ldr	r2, [pc, #648]	; (80034dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003254:	4621      	mov	r1, r4
 8003256:	fba1 1202 	umull	r1, r2, r1, r2
 800325a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800325c:	460a      	mov	r2, r1
 800325e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003260:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003262:	4413      	add	r3, r2
 8003264:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326a:	2200      	movs	r2, #0
 800326c:	65bb      	str	r3, [r7, #88]	; 0x58
 800326e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003274:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003278:	f7fc ffca 	bl	8000210 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003286:	e064      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003288:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	2200      	movs	r2, #0
 8003290:	653b      	str	r3, [r7, #80]	; 0x50
 8003292:	657a      	str	r2, [r7, #84]	; 0x54
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032a4:	4622      	mov	r2, r4
 80032a6:	462b      	mov	r3, r5
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b6:	0150      	lsls	r0, r2, #5
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4621      	mov	r1, r4
 80032be:	1a51      	subs	r1, r2, r1
 80032c0:	6139      	str	r1, [r7, #16]
 80032c2:	4629      	mov	r1, r5
 80032c4:	eb63 0301 	sbc.w	r3, r3, r1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d6:	4659      	mov	r1, fp
 80032d8:	018b      	lsls	r3, r1, #6
 80032da:	4651      	mov	r1, sl
 80032dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e0:	4651      	mov	r1, sl
 80032e2:	018a      	lsls	r2, r1, #6
 80032e4:	4651      	mov	r1, sl
 80032e6:	ebb2 0801 	subs.w	r8, r2, r1
 80032ea:	4659      	mov	r1, fp
 80032ec:	eb63 0901 	sbc.w	r9, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003300:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003304:	4690      	mov	r8, r2
 8003306:	4699      	mov	r9, r3
 8003308:	4623      	mov	r3, r4
 800330a:	eb18 0303 	adds.w	r3, r8, r3
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	462b      	mov	r3, r5
 8003312:	eb49 0303 	adc.w	r3, r9, r3
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003324:	4629      	mov	r1, r5
 8003326:	028b      	lsls	r3, r1, #10
 8003328:	4621      	mov	r1, r4
 800332a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332e:	4621      	mov	r1, r4
 8003330:	028a      	lsls	r2, r1, #10
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	2200      	movs	r2, #0
 800333c:	643b      	str	r3, [r7, #64]	; 0x40
 800333e:	647a      	str	r2, [r7, #68]	; 0x44
 8003340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003344:	f7fc ff64 	bl	8000210 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003352:	4b60      	ldr	r3, [pc, #384]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	3301      	adds	r3, #1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco / pllp;
 8003364:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003374:	e0a6      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003376:	4b57      	ldr	r3, [pc, #348]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003382:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02a      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
 8003398:	63fa      	str	r2, [r7, #60]	; 0x3c
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a0:	2100      	movs	r1, #0
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_RCC_GetSysClockFreq+0x350>)
 80033a4:	fb03 f201 	mul.w	r2, r3, r1
 80033a8:	2300      	movs	r3, #0
 80033aa:	fb00 f303 	mul.w	r3, r0, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_RCC_GetSysClockFreq+0x350>)
 80033b2:	fba0 1202 	umull	r1, r2, r0, r2
 80033b6:	677a      	str	r2, [r7, #116]	; 0x74
 80033b8:	460a      	mov	r2, r1
 80033ba:	673a      	str	r2, [r7, #112]	; 0x70
 80033bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033be:	4413      	add	r3, r2
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74
 80033c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c6:	2200      	movs	r2, #0
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	637a      	str	r2, [r7, #52]	; 0x34
 80033cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033d4:	f7fc ff1c 	bl	8000210 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033e2:	e05b      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	2200      	movs	r2, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003400:	4642      	mov	r2, r8
 8003402:	464b      	mov	r3, r9
 8003404:	f04f 0000 	mov.w	r0, #0
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	0159      	lsls	r1, r3, #5
 800340e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003412:	0150      	lsls	r0, r2, #5
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4641      	mov	r1, r8
 800341a:	ebb2 0a01 	subs.w	sl, r2, r1
 800341e:	4649      	mov	r1, r9
 8003420:	eb63 0b01 	sbc.w	fp, r3, r1
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003438:	ebb2 040a 	subs.w	r4, r2, sl
 800343c:	eb63 050b 	sbc.w	r5, r3, fp
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	00eb      	lsls	r3, r5, #3
 800344a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344e:	00e2      	lsls	r2, r4, #3
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	4643      	mov	r3, r8
 8003456:	18e3      	adds	r3, r4, r3
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	464b      	mov	r3, r9
 800345c:	eb45 0303 	adc.w	r3, r5, r3
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346e:	4629      	mov	r1, r5
 8003470:	028b      	lsls	r3, r1, #10
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003478:	4621      	mov	r1, r4
 800347a:	028a      	lsls	r2, r1, #10
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003484:	2200      	movs	r2, #0
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348e:	f7fc febf 	bl	8000210 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4613      	mov	r3, r2
 8003498:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0f1b      	lsrs	r3, r3, #28
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco / pllr;
 80034aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034ba:	e003      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3798      	adds	r7, #152	; 0x98
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	017d7840 	.word	0x017d7840

080034e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e28d      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8083 	beq.w	8003606 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b04      	cmp	r3, #4
 800350a:	d019      	beq.n	8003540 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800350c:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
        || \
 8003514:	2b08      	cmp	r3, #8
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003524:	d00c      	beq.n	8003540 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b8b      	ldr	r3, [pc, #556]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d112      	bne.n	8003558 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353e:	d10b      	bne.n	8003558 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4b84      	ldr	r3, [pc, #528]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05b      	beq.n	8003604 <HAL_RCC_OscConfig+0x124>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d157      	bne.n	8003604 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e25a      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d106      	bne.n	8003570 <HAL_RCC_OscConfig+0x90>
 8003562:	4b7c      	ldr	r3, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7b      	ldr	r2, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xcc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0xb4>
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a72      	ldr	r2, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xcc>
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a6e      	ldr	r2, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6b      	ldr	r2, [pc, #428]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fdfa 	bl	80011ac <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fdf6 	bl	80011ac <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e21f      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b61      	ldr	r3, [pc, #388]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xdc>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fde6 	bl	80011ac <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fde2 	bl	80011ac <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e20b      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x104>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d06f      	beq.n	80036f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003612:	4b50      	ldr	r3, [pc, #320]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800361e:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
        || \
 8003626:	2b08      	cmp	r3, #8
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003642:	4b44      	ldr	r3, [pc, #272]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x186>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1d3      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4937      	ldr	r1, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCC_OscConfig+0x278>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fd fd8f 	bl	80011ac <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fd fd8b 	bl	80011ac <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1b4      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4925      	ldr	r1, [pc, #148]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x278>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fd6e 	bl	80011ac <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fd fd6a 	bl	80011ac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e193      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d036      	beq.n	800376c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_RCC_OscConfig+0x27c>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fd fd4e 	bl	80011ac <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7fd fd4a 	bl	80011ac <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e173      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x274>)
 8003728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x234>
 8003732:	e01b      	b.n	800376c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_OscConfig+0x27c>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fd fd37 	bl	80011ac <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	e00e      	b.n	8003760 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003742:	f7fd fd33 	bl	80011ac <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d907      	bls.n	8003760 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e15c      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
 8003754:	40023800 	.word	0x40023800
 8003758:	42470000 	.word	0x42470000
 800375c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b8a      	ldr	r3, [pc, #552]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ea      	bne.n	8003742 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8097 	beq.w	80038a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b83      	ldr	r3, [pc, #524]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b7f      	ldr	r3, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b79      	ldr	r3, [pc, #484]	; (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d118      	bne.n	80037e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a75      	ldr	r2, [pc, #468]	; (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fd fcf3 	bl	80011ac <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ca:	f7fd fcef 	bl	80011ac <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e118      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_RCC_OscConfig+0x4b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x31e>
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	e01c      	b.n	8003838 <HAL_RCC_OscConfig+0x358>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x340>
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a60      	ldr	r2, [pc, #384]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	4b5e      	ldr	r3, [pc, #376]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a5d      	ldr	r2, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0x358>
 8003820:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a59      	ldr	r2, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a56      	ldr	r2, [pc, #344]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003832:	f023 0304 	bic.w	r3, r3, #4
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fd fcb4 	bl	80011ac <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fd fcb0 	bl	80011ac <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0d7      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <HAL_RCC_OscConfig+0x368>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd fc9e 	bl	80011ac <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fd fc9a 	bl	80011ac <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0c1      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ee      	bne.n	8003874 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4a3a      	ldr	r2, [pc, #232]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80ad 	beq.w	8003a0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d060      	beq.n	8003980 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d145      	bne.n	8003952 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b33      	ldr	r3, [pc, #204]	; (8003994 <HAL_RCC_OscConfig+0x4b4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd fc6e 	bl	80011ac <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fc6a 	bl	80011ac <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e093      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	491b      	ldr	r1, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4b4>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392a:	f7fd fc3f 	bl	80011ac <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd fc3b 	bl	80011ac <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e064      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x452>
 8003950:	e05c      	b.n	8003a0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_RCC_OscConfig+0x4b4>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fc28 	bl	80011ac <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fc24 	bl	80011ac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04d      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_OscConfig+0x4ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x480>
 800397e:	e045      	b.n	8003a0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e040      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003998:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <HAL_RCC_OscConfig+0x538>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d030      	beq.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d129      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d122      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d119      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d10f      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f839 	bl	8003aba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 f9c0 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04e      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8d2 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8c4 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8d5 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d020      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0204 	mvn.w	r2, #4
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8ac 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f89e 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8af 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f886 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f878 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f889 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f860 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f852 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f863 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0201 	mvn.w	r2, #1
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fc ff82 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f906 	bl	8003f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f834 	bl	8003dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0220 	mvn.w	r2, #32
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8d8 	bl	8003f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a46      	ldr	r2, [pc, #280]	; (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a43      	ldr	r2, [pc, #268]	; (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a42      	ldr	r2, [pc, #264]	; (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a41      	ldr	r2, [pc, #260]	; (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a40      	ldr	r2, [pc, #256]	; (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d027      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d023      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	; (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <TIM_Base_SetConfig+0x140>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <TIM_Base_SetConfig+0x144>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <TIM_Base_SetConfig+0x148>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <TIM_Base_SetConfig+0x14c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <TIM_Base_SetConfig+0x150>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <TIM_Base_SetConfig+0x154>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]
  }
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40010400 	.word	0x40010400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800
 8003f2c:	40001800 	.word	0x40001800
 8003f30:	40001c00 	.word	0x40001c00
 8003f34:	40002000 	.word	0x40002000

08003f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e042      	b.n	8003ff8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc ff62 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f973 	bl	8004290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b20      	cmp	r3, #32
 800401e:	d175      	bne.n	800410c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Transmit+0x2c>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e06e      	b.n	800410e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2221      	movs	r2, #33	; 0x21
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403e:	f7fd f8b5 	bl	80011ac <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d108      	bne.n	800406c <HAL_UART_Transmit+0x6c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e003      	b.n	8004074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004074:	e02e      	b.n	80040d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f848 	bl	8004116 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e03a      	b.n	800410e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3302      	adds	r3, #2
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e007      	b.n	80040c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	3301      	adds	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1cb      	bne.n	8004076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2140      	movs	r1, #64	; 0x40
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f814 	bl	8004116 <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e006      	b.n	800410e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004126:	e03b      	b.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d037      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fd f83c 	bl	80011ac <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <UART_WaitOnFlagUntilTimeout+0x30>
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e03a      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d020      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d01d      	beq.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d116      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f81d 	bl	80041c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2208      	movs	r2, #8
 8004192:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e00f      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d0b4      	beq.n	8004128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b095      	sub	sp, #84	; 0x54
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f0:	643a      	str	r2, [r7, #64]	; 0x40
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004260:	61ba      	str	r2, [r7, #24]
 8004262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004282:	bf00      	nop
 8004284:	3754      	adds	r7, #84	; 0x54
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b0c0      	sub	sp, #256	; 0x100
 8004296:	af00      	add	r7, sp, #0
 8004298:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	68d9      	ldr	r1, [r3, #12]
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042e8:	f021 010c 	bic.w	r1, r1, #12
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	6999      	ldr	r1, [r3, #24]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	ea40 0301 	orr.w	r3, r0, r1
 8004316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b8f      	ldr	r3, [pc, #572]	; (800455c <UART_SetConfig+0x2cc>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d005      	beq.n	8004330 <UART_SetConfig+0xa0>
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8d      	ldr	r3, [pc, #564]	; (8004560 <UART_SetConfig+0x2d0>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d104      	bne.n	800433a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe f972 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8004334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004338:	e003      	b.n	8004342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7fe f959 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 800433e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	f040 810c 	bne.w	8004568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800435a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800435e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	1891      	adds	r1, r2, r2
 8004368:	65b9      	str	r1, [r7, #88]	; 0x58
 800436a:	415b      	adcs	r3, r3
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004372:	4621      	mov	r1, r4
 8004374:	eb12 0801 	adds.w	r8, r2, r1
 8004378:	4629      	mov	r1, r5
 800437a:	eb43 0901 	adc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	4623      	mov	r3, r4
 8004398:	eb18 0303 	adds.w	r3, r8, r3
 800439c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043a0:	462b      	mov	r3, r5
 80043a2:	eb49 0303 	adc.w	r3, r9, r3
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043be:	460b      	mov	r3, r1
 80043c0:	18db      	adds	r3, r3, r3
 80043c2:	653b      	str	r3, [r7, #80]	; 0x50
 80043c4:	4613      	mov	r3, r2
 80043c6:	eb42 0303 	adc.w	r3, r2, r3
 80043ca:	657b      	str	r3, [r7, #84]	; 0x54
 80043cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d4:	f7fb ff1c 	bl	8000210 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <UART_SetConfig+0x2d4>)
 80043de:	fba3 2302 	umull	r2, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	011c      	lsls	r4, r3, #4
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004400:	415b      	adcs	r3, r3
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004408:	4641      	mov	r1, r8
 800440a:	eb12 0a01 	adds.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb43 0b01 	adc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	4692      	mov	sl, r2
 800442a:	469b      	mov	fp, r3
 800442c:	4643      	mov	r3, r8
 800442e:	eb1a 0303 	adds.w	r3, sl, r3
 8004432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004436:	464b      	mov	r3, r9
 8004438:	eb4b 0303 	adc.w	r3, fp, r3
 800443c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800444c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004454:	460b      	mov	r3, r1
 8004456:	18db      	adds	r3, r3, r3
 8004458:	643b      	str	r3, [r7, #64]	; 0x40
 800445a:	4613      	mov	r3, r2
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
 8004462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800446a:	f7fb fed1 	bl	8000210 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <UART_SetConfig+0x2d4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	; 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <UART_SetConfig+0x2d4>)
 800448c:	fba3 2302 	umull	r2, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004498:	441c      	add	r4, r3
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b4:	415b      	adcs	r3, r3
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6339      	str	r1, [r7, #48]	; 0x30
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004508:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800450c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004526:	f7fb fe73 	bl	8000210 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <UART_SetConfig+0x2d4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <UART_SetConfig+0x2d4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 0207 	and.w	r2, r3, #7
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4422      	add	r2, r4
 8004556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004558:	e106      	b.n	8004768 <UART_SetConfig+0x4d8>
 800455a:	bf00      	nop
 800455c:	40011000 	.word	0x40011000
 8004560:	40011400 	.word	0x40011400
 8004564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004572:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800457a:	4642      	mov	r2, r8
 800457c:	464b      	mov	r3, r9
 800457e:	1891      	adds	r1, r2, r2
 8004580:	6239      	str	r1, [r7, #32]
 8004582:	415b      	adcs	r3, r3
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458a:	4641      	mov	r1, r8
 800458c:	1854      	adds	r4, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0501 	adc.w	r5, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	00eb      	lsls	r3, r5, #3
 800459e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a2:	00e2      	lsls	r2, r4, #3
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	4643      	mov	r3, r8
 80045aa:	18e3      	adds	r3, r4, r3
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b0:	464b      	mov	r3, r9
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045d6:	4629      	mov	r1, r5
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4621      	mov	r1, r4
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045e8:	f7fb fe12 	bl	8000210 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b60      	ldr	r3, [pc, #384]	; (8004774 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	61b9      	str	r1, [r7, #24]
 8004614:	415b      	adcs	r3, r3
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6139      	str	r1, [r7, #16]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	67bb      	str	r3, [r7, #120]	; 0x78
 8004666:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004674:	4649      	mov	r1, r9
 8004676:	008b      	lsls	r3, r1, #2
 8004678:	4641      	mov	r1, r8
 800467a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467e:	4641      	mov	r1, r8
 8004680:	008a      	lsls	r2, r1, #2
 8004682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004686:	f7fb fdc3 	bl	8000210 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4611      	mov	r1, r2
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <UART_SetConfig+0x4e4>)
 8004692:	fba3 2301 	umull	r2, r3, r3, r1
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2264      	movs	r2, #100	; 0x64
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	1acb      	subs	r3, r1, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	; 0x32
 80046a4:	4a33      	ldr	r2, [pc, #204]	; (8004774 <UART_SetConfig+0x4e4>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b0:	441c      	add	r4, r3
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	673b      	str	r3, [r7, #112]	; 0x70
 80046ba:	677a      	str	r2, [r7, #116]	; 0x74
 80046bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	66bb      	str	r3, [r7, #104]	; 0x68
 8004702:	464b      	mov	r3, r9
 8004704:	460a      	mov	r2, r1
 8004706:	eb42 0303 	adc.w	r3, r2, r3
 800470a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	663b      	str	r3, [r7, #96]	; 0x60
 8004716:	667a      	str	r2, [r7, #100]	; 0x64
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004724:	4649      	mov	r1, r9
 8004726:	008b      	lsls	r3, r1, #2
 8004728:	4641      	mov	r1, r8
 800472a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472e:	4641      	mov	r1, r8
 8004730:	008a      	lsls	r2, r1, #2
 8004732:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004736:	f7fb fd6b 	bl	8000210 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x4e4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	; 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x4e4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800476e:	46bd      	mov	sp, r7
 8004770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800478a:	2b84      	cmp	r3, #132	; 0x84
 800478c:	d005      	beq.n	800479a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800478e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	3303      	adds	r3, #3
 8004798:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047ac:	f000 fea6 	bl	80054fc <vTaskStartScheduler>
  
  return osOK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b8:	b089      	sub	sp, #36	; 0x24
 80047ba:	af04      	add	r7, sp, #16
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <osThreadCreate+0x54>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01c      	beq.n	800480a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685c      	ldr	r4, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691e      	ldr	r6, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ffc8 	bl	8004778 <makeFreeRtosPriority>
 80047e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047f2:	9202      	str	r2, [sp, #8]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	9100      	str	r1, [sp, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4632      	mov	r2, r6
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f000 fc9e 	bl	8005140 <xTaskCreateStatic>
 8004804:	4603      	mov	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e01c      	b.n	8004844 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685c      	ldr	r4, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004816:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ffaa 	bl	8004778 <makeFreeRtosPriority>
 8004824:	4602      	mov	r2, r0
 8004826:	f107 030c 	add.w	r3, r7, #12
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	9200      	str	r2, [sp, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4632      	mov	r2, r6
 8004832:	4629      	mov	r1, r5
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fce0 	bl	80051fa <xTaskCreate>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800484e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <osDelay+0x16>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	e000      	b.n	8004866 <osDelay+0x18>
 8004864:	2301      	movs	r3, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fe14 	bl	8005494 <vTaskDelay>
  
  return osOK;
 800486c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 0208 	add.w	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 0208 	add.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f103 0208 	add.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d103      	bne.n	8004938 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e00c      	b.n	8004952 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3308      	adds	r3, #8
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e002      	b.n	8004946 <vListInsert+0x2e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d2f6      	bcs.n	8004940 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d103      	bne.n	80049be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a0a:	f001 fca3 	bl	8006354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ff97 	bl	80059a0 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <xQueueGenericReset+0xcc>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e009      	b.n	8004a9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fef1 	bl	8004876 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff feec 	bl	8004876 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 fc89 	bl	80063b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3348      	adds	r3, #72	; 0x48
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fd55 	bl	8006598 <pvPortMalloc>
 8004aee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d011      	beq.n	8004b1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3348      	adds	r3, #72	; 0x48
 8004afe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b08:	79fa      	ldrb	r2, [r7, #7]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f805 	bl	8004b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b52:	2101      	movs	r1, #1
 8004b54:	69b8      	ldr	r0, [r7, #24]
 8004b56:	f7ff ff43 	bl	80049e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08e      	sub	sp, #56	; 0x38
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b72:	2300      	movs	r3, #0
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGenericSend+0x32>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <xQueueGenericSend+0x40>
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <xQueueGenericSend+0x44>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <xQueueGenericSend+0x46>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <xQueueGenericSend+0x60>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d103      	bne.n	8004bd2 <xQueueGenericSend+0x6e>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <xQueueGenericSend+0x72>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueGenericSend+0x74>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	623b      	str	r3, [r7, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bf2:	f001 f895 	bl	8005d20 <xTaskGetSchedulerState>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <xQueueGenericSend+0x9e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <xQueueGenericSend+0xa2>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <xQueueGenericSend+0xa4>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	61fb      	str	r3, [r7, #28]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c22:	f001 fb97 	bl	8006354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <xQueueGenericSend+0xd4>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d129      	bne.n	8004c8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c3e:	f000 f96f 	bl	8004f20 <prvCopyDataToQueue>
 8004c42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d010      	beq.n	8004c6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fea5 	bl	80059a0 <xTaskRemoveFromEventList>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c5c:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <xQueueGenericSend+0x1f8>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	e00a      	b.n	8004c84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c74:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <xQueueGenericSend+0x1f8>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c84:	f001 fb96 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e063      	b.n	8004d54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c92:	f001 fb8f 	bl	80063b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e05c      	b.n	8004d54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fedd 	bl	8005a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cae:	f001 fb81 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb2:	f000 fc8d 	bl	80055d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb6:	f001 fb4d 	bl	8006354 <vPortEnterCritical>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc0:	b25b      	sxtb	r3, r3
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d103      	bne.n	8004cd0 <xQueueGenericSend+0x16c>
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSend+0x182>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce6:	f001 fb65 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cea:	1d3a      	adds	r2, r7, #4
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fecc 	bl	8005a90 <xTaskCheckForTimeOut>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d124      	bne.n	8004d48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d00:	f000 fa06 	bl	8005110 <prvIsQueueFull>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fe20 	bl	8005958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1a:	f000 f991 	bl	8005040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d1e:	f000 fc65 	bl	80055ec <xTaskResumeAll>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f47f af7c 	bne.w	8004c22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <xQueueGenericSend+0x1f8>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	e772      	b.n	8004c22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3e:	f000 f97f 	bl	8005040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d42:	f000 fc53 	bl	80055ec <xTaskResumeAll>
 8004d46:	e76c      	b.n	8004c22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4a:	f000 f979 	bl	8005040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4e:	f000 fc4d 	bl	80055ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3738      	adds	r7, #56	; 0x38
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <xQueueReceive+0x30>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	623b      	str	r3, [r7, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <xQueueReceive+0x3e>
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <xQueueReceive+0x42>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xQueueReceive+0x44>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xQueueReceive+0x5e>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	61fb      	str	r3, [r7, #28]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbe:	f000 ffaf 	bl	8005d20 <xTaskGetSchedulerState>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <xQueueReceive+0x6e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <xQueueReceive+0x72>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueReceive+0x74>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xQueueReceive+0x8e>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dee:	f001 fab1 	bl	8006354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01f      	beq.n	8004e3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e02:	f000 f8f7 	bl	8004ff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00f      	beq.n	8004e36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	3310      	adds	r3, #16
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fdc0 	bl	80059a0 <xTaskRemoveFromEventList>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <xQueueReceive+0x1bc>)
 8004e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e36:	f001 fabd 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e069      	b.n	8004f12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e44:	f001 fab6 	bl	80063b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e062      	b.n	8004f12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e52:	f107 0310 	add.w	r3, r7, #16
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fe04 	bl	8005a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e60:	f001 faa8 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e64:	f000 fbb4 	bl	80055d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e68:	f001 fa74 	bl	8006354 <vPortEnterCritical>
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d103      	bne.n	8004e82 <xQueueReceive+0x122>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d103      	bne.n	8004e98 <xQueueReceive+0x138>
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e98:	f001 fa8c 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e9c:	1d3a      	adds	r2, r7, #4
 8004e9e:	f107 0310 	add.w	r3, r7, #16
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fdf3 	bl	8005a90 <xTaskCheckForTimeOut>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d123      	bne.n	8004ef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb2:	f000 f917 	bl	80050e4 <prvIsQueueEmpty>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d017      	beq.n	8004eec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fd47 	bl	8005958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ecc:	f000 f8b8 	bl	8005040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed0:	f000 fb8c 	bl	80055ec <xTaskResumeAll>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d189      	bne.n	8004dee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <xQueueReceive+0x1bc>)
 8004edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	e780      	b.n	8004dee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f000 f8a7 	bl	8005040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef2:	f000 fb7b 	bl	80055ec <xTaskResumeAll>
 8004ef6:	e77a      	b.n	8004dee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efa:	f000 f8a1 	bl	8005040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004efe:	f000 fb75 	bl	80055ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f04:	f000 f8ee 	bl	80050e4 <prvIsQueueEmpty>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f43f af6f 	beq.w	8004dee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	; 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d14d      	bne.n	8004fe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 ff06 	bl	8005d5c <xTaskPriorityDisinherit>
 8004f50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e043      	b.n	8004fe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d119      	bne.n	8004f94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6858      	ldr	r0, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	f002 fe04 	bl	8007b78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	441a      	add	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d32b      	bcc.n	8004fe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	e026      	b.n	8004fe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68d8      	ldr	r0, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	f002 fdea 	bl	8007b78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	425b      	negs	r3, r3
 8004fae:	441a      	add	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d207      	bcs.n	8004fd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	425b      	negs	r3, r3
 8004fca:	441a      	add	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d105      	bne.n	8004fe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fea:	697b      	ldr	r3, [r7, #20]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d018      	beq.n	8005038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	d303      	bcc.n	8005028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68d9      	ldr	r1, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	461a      	mov	r2, r3
 8005032:	6838      	ldr	r0, [r7, #0]
 8005034:	f002 fda0 	bl	8007b78 <memcpy>
	}
}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005048:	f001 f984 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005054:	e011      	b.n	800507a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fc9c 	bl	80059a0 <xTaskRemoveFromEventList>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800506e:	f000 fd71 	bl	8005b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	3b01      	subs	r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800507a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dce9      	bgt.n	8005056 <prvUnlockQueue+0x16>
 8005082:	e000      	b.n	8005086 <prvUnlockQueue+0x46>
					break;
 8005084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800508e:	f001 f991 	bl	80063b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005092:	f001 f95f 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800509e:	e011      	b.n	80050c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3310      	adds	r3, #16
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fc77 	bl	80059a0 <xTaskRemoveFromEventList>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050b8:	f000 fd4c 	bl	8005b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	3b01      	subs	r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dce9      	bgt.n	80050a0 <prvUnlockQueue+0x60>
 80050cc:	e000      	b.n	80050d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	22ff      	movs	r2, #255	; 0xff
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050d8:	f001 f96c 	bl	80063b4 <vPortExitCritical>
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ec:	f001 f932 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e001      	b.n	8005102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005102:	f001 f957 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005118:	f001 f91c 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	429a      	cmp	r2, r3
 8005126:	d102      	bne.n	800512e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e001      	b.n	8005132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005132:	f001 f93f 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8005136:	68fb      	ldr	r3, [r7, #12]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af04      	add	r7, sp, #16
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	623b      	str	r3, [r7, #32]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xTaskCreateStatic+0x46>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61fb      	str	r3, [r7, #28]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005186:	23a0      	movs	r3, #160	; 0xa0
 8005188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2ba0      	cmp	r3, #160	; 0xa0
 800518e:	d00a      	beq.n	80051a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	61bb      	str	r3, [r7, #24]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01e      	beq.n	80051ec <xTaskCreateStatic+0xac>
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051c6:	2300      	movs	r3, #0
 80051c8:	9303      	str	r3, [sp, #12]
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f850 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051e6:	f000 f8eb 	bl	80053c0 <prvAddNewTaskToReadyList>
 80051ea:	e001      	b.n	80051f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051f0:	697b      	ldr	r3, [r7, #20]
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3728      	adds	r7, #40	; 0x28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b08c      	sub	sp, #48	; 0x30
 80051fe:	af04      	add	r7, sp, #16
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f9c2 	bl	8006598 <pvPortMalloc>
 8005214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00e      	beq.n	800523a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800521c:	20a0      	movs	r0, #160	; 0xa0
 800521e:	f001 f9bb 	bl	8006598 <pvPortMalloc>
 8005222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
 8005230:	e005      	b.n	800523e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f001 fa7c 	bl	8006730 <vPortFree>
 8005238:	e001      	b.n	800523e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	2300      	movs	r3, #0
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f80e 	bl	8005284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005268:	69f8      	ldr	r0, [r7, #28]
 800526a:	f000 f8a9 	bl	80053c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e002      	b.n	800527a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800527a:	69bb      	ldr	r3, [r7, #24]
	}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800529c:	3b01      	subs	r3, #1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	617b      	str	r3, [r7, #20]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01f      	beq.n	8005312 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e012      	b.n	80052fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	7819      	ldrb	r1, [r3, #0]
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	3334      	adds	r3, #52	; 0x34
 80052e8:	460a      	mov	r2, r1
 80052ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d006      	beq.n	8005306 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d9e9      	bls.n	80052d8 <prvInitialiseNewTask+0x54>
 8005304:	e000      	b.n	8005308 <prvInitialiseNewTask+0x84>
			{
				break;
 8005306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005310:	e003      	b.n	800531a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2b06      	cmp	r3, #6
 800531e:	d901      	bls.n	8005324 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005320:	2306      	movs	r3, #6
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800532e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2200      	movs	r2, #0
 8005334:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	3304      	adds	r3, #4
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fabb 	bl	80048b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	3318      	adds	r3, #24
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fab6 	bl	80048b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	f1c3 0207 	rsb	r2, r3, #7
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	334c      	adds	r3, #76	; 0x4c
 8005374:	224c      	movs	r2, #76	; 0x4c
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f002 fb73 	bl	8007a64 <memset>
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <prvInitialiseNewTask+0x130>)
 8005382:	651a      	str	r2, [r3, #80]	; 0x50
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <prvInitialiseNewTask+0x134>)
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <prvInitialiseNewTask+0x138>)
 800538e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f000 fead 	bl	80060f4 <pxPortInitialiseStack>
 800539a:	4602      	mov	r2, r0
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000a428 	.word	0x2000a428
 80053b8:	2000a490 	.word	0x2000a490
 80053bc:	2000a4f8 	.word	0x2000a4f8

080053c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c8:	f000 ffc4 	bl	8006354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a29      	ldr	r2, [pc, #164]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053de:	4a27      	ldr	r2, [pc, #156]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e4:	4b24      	ldr	r3, [pc, #144]	; (8005478 <prvAddNewTaskToReadyList+0xb8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d110      	bne.n	800540e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053ec:	f000 fbd6 	bl	8005b9c <prvInitialiseTaskLists>
 80053f0:	e00d      	b.n	800540e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <prvAddNewTaskToReadyList+0xc0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	429a      	cmp	r2, r3
 8005406:	d802      	bhi.n	800540e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005408:	4a1c      	ldr	r2, [pc, #112]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <prvAddNewTaskToReadyList+0xc4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <prvAddNewTaskToReadyList+0xc4>)
 8005416:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2201      	movs	r2, #1
 800541e:	409a      	lsls	r2, r3
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <prvAddNewTaskToReadyList+0xc8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <prvAddNewTaskToReadyList+0xc8>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <prvAddNewTaskToReadyList+0xcc>)
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff fa45 	bl	80048d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005446:	f000 ffb5 	bl	80063b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <prvAddNewTaskToReadyList+0xc0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00e      	beq.n	8005470 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddNewTaskToReadyList+0xbc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d207      	bcs.n	8005470 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <prvAddNewTaskToReadyList+0xd0>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200067d4 	.word	0x200067d4
 800547c:	200066d4 	.word	0x200066d4
 8005480:	200067e0 	.word	0x200067e0
 8005484:	200067f0 	.word	0x200067f0
 8005488:	200067dc 	.word	0x200067dc
 800548c:	200066d8 	.word	0x200066d8
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d017      	beq.n	80054d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <vTaskDelay+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <vTaskDelay+0x30>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60bb      	str	r3, [r7, #8]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054c4:	f000 f884 	bl	80055d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fdac 	bl	8006028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054d0:	f000 f88c 	bl	80055ec <xTaskResumeAll>
 80054d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <vTaskDelay+0x64>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200067fc 	.word	0x200067fc
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550a:	463a      	mov	r2, r7
 800550c:	1d39      	adds	r1, r7, #4
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7fa fffa 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	460a      	mov	r2, r1
 800552a:	4921      	ldr	r1, [pc, #132]	; (80055b0 <vTaskStartScheduler+0xb4>)
 800552c:	4821      	ldr	r0, [pc, #132]	; (80055b4 <vTaskStartScheduler+0xb8>)
 800552e:	f7ff fe07 	bl	8005140 <xTaskCreateStatic>
 8005532:	4603      	mov	r3, r0
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <vTaskStartScheduler+0xbc>)
 8005536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <vTaskStartScheduler+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e001      	b.n	800554a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d11b      	bne.n	8005588 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005564:	4b15      	ldr	r3, [pc, #84]	; (80055bc <vTaskStartScheduler+0xc0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	334c      	adds	r3, #76	; 0x4c
 800556a:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <vTaskStartScheduler+0xc4>)
 800556c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <vTaskStartScheduler+0xc8>)
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <vTaskStartScheduler+0xcc>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <vTaskStartScheduler+0xd0>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005582:	f000 fe45 	bl	8006210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005586:	e00e      	b.n	80055a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d10a      	bne.n	80055a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <vTaskStartScheduler+0xa8>
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08007d44 	.word	0x08007d44
 80055b4:	08005b6d 	.word	0x08005b6d
 80055b8:	200067f8 	.word	0x200067f8
 80055bc:	200066d4 	.word	0x200066d4
 80055c0:	2000005c 	.word	0x2000005c
 80055c4:	200067f4 	.word	0x200067f4
 80055c8:	200067e0 	.word	0x200067e0
 80055cc:	200067d8 	.word	0x200067d8

080055d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <vTaskSuspendAll+0x18>)
 80055dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	200067fc 	.word	0x200067fc

080055ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <xTaskResumeAll+0x114>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <xTaskResumeAll+0x2c>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	603b      	str	r3, [r7, #0]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005618:	f000 fe9c 	bl	8006354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800561c:	4b38      	ldr	r3, [pc, #224]	; (8005700 <xTaskResumeAll+0x114>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	4a37      	ldr	r2, [pc, #220]	; (8005700 <xTaskResumeAll+0x114>)
 8005624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <xTaskResumeAll+0x114>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d161      	bne.n	80056f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800562e:	4b35      	ldr	r3, [pc, #212]	; (8005704 <xTaskResumeAll+0x118>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d05d      	beq.n	80056f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005636:	e02e      	b.n	8005696 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005638:	4b33      	ldr	r3, [pc, #204]	; (8005708 <xTaskResumeAll+0x11c>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3318      	adds	r3, #24
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff f9a0 	bl	800498a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f99b 	bl	800498a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	4b2b      	ldr	r3, [pc, #172]	; (800570c <xTaskResumeAll+0x120>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <xTaskResumeAll+0x120>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <xTaskResumeAll+0x124>)
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff f927 	bl	80048d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	4b23      	ldr	r3, [pc, #140]	; (8005714 <xTaskResumeAll+0x128>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <xTaskResumeAll+0x12c>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <xTaskResumeAll+0x11c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1cc      	bne.n	8005638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056a4:	f000 fb1c 	bl	8005ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a8:	4b1c      	ldr	r3, [pc, #112]	; (800571c <xTaskResumeAll+0x130>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d010      	beq.n	80056d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056b4:	f000 f836 	bl	8005724 <xTaskIncrementTick>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <xTaskResumeAll+0x12c>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f1      	bne.n	80056b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <xTaskResumeAll+0x130>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <xTaskResumeAll+0x12c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056de:	2301      	movs	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <xTaskResumeAll+0x134>)
 80056e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f000 fe5f 	bl	80063b4 <vPortExitCritical>

	return xAlreadyYielded;
 80056f6:	68bb      	ldr	r3, [r7, #8]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200067fc 	.word	0x200067fc
 8005704:	200067d4 	.word	0x200067d4
 8005708:	20006794 	.word	0x20006794
 800570c:	200067dc 	.word	0x200067dc
 8005710:	200066d8 	.word	0x200066d8
 8005714:	200066d4 	.word	0x200066d4
 8005718:	200067e8 	.word	0x200067e8
 800571c:	200067e4 	.word	0x200067e4
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <xTaskIncrementTick+0x144>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 808e 	bne.w	8005854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005738:	4b4c      	ldr	r3, [pc, #304]	; (800586c <xTaskIncrementTick+0x148>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005740:	4a4a      	ldr	r2, [pc, #296]	; (800586c <xTaskIncrementTick+0x148>)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d120      	bne.n	800578e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800574c:	4b48      	ldr	r3, [pc, #288]	; (8005870 <xTaskIncrementTick+0x14c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <xTaskIncrementTick+0x48>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	603b      	str	r3, [r7, #0]
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <xTaskIncrementTick+0x46>
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <xTaskIncrementTick+0x14c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	4b40      	ldr	r3, [pc, #256]	; (8005874 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a3e      	ldr	r2, [pc, #248]	; (8005870 <xTaskIncrementTick+0x14c>)
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4a3e      	ldr	r2, [pc, #248]	; (8005874 <xTaskIncrementTick+0x150>)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <xTaskIncrementTick+0x154>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <xTaskIncrementTick+0x154>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	f000 faa9 	bl	8005ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <xTaskIncrementTick+0x158>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d348      	bcc.n	800582a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005798:	4b35      	ldr	r3, [pc, #212]	; (8005870 <xTaskIncrementTick+0x14c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <xTaskIncrementTick+0x158>)
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	601a      	str	r2, [r3, #0]
					break;
 80057aa:	e03e      	b.n	800582a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ac:	4b30      	ldr	r3, [pc, #192]	; (8005870 <xTaskIncrementTick+0x14c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d203      	bcs.n	80057cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <xTaskIncrementTick+0x158>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057ca:	e02e      	b.n	800582a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff f8da 	bl	800498a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f8d1 	bl	800498a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <xTaskIncrementTick+0x15c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <xTaskIncrementTick+0x15c>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <xTaskIncrementTick+0x160>)
 8005808:	441a      	add	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff f85d 	bl	80048d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <xTaskIncrementTick+0x164>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d3b9      	bcc.n	8005798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005828:	e7b6      	b.n	8005798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <xTaskIncrementTick+0x164>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4914      	ldr	r1, [pc, #80]	; (8005884 <xTaskIncrementTick+0x160>)
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d901      	bls.n	8005846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <xTaskIncrementTick+0x168>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e004      	b.n	800585e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <xTaskIncrementTick+0x16c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <xTaskIncrementTick+0x16c>)
 800585c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200067fc 	.word	0x200067fc
 800586c:	200067d8 	.word	0x200067d8
 8005870:	2000678c 	.word	0x2000678c
 8005874:	20006790 	.word	0x20006790
 8005878:	200067ec 	.word	0x200067ec
 800587c:	200067f4 	.word	0x200067f4
 8005880:	200067dc 	.word	0x200067dc
 8005884:	200066d8 	.word	0x200066d8
 8005888:	200066d4 	.word	0x200066d4
 800588c:	200067e8 	.word	0x200067e8
 8005890:	200067e4 	.word	0x200067e4

08005894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <vTaskSwitchContext+0xac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <vTaskSwitchContext+0xb0>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058a8:	e044      	b.n	8005934 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058aa:	4b26      	ldr	r3, [pc, #152]	; (8005944 <vTaskSwitchContext+0xb0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <vTaskSwitchContext+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	fab3 f383 	clz	r3, r3
 80058bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f1c3 031f 	rsb	r3, r3, #31
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	4921      	ldr	r1, [pc, #132]	; (800594c <vTaskSwitchContext+0xb8>)
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskSwitchContext+0x5a>
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4a14      	ldr	r2, [pc, #80]	; (800594c <vTaskSwitchContext+0xb8>)
 80058fc:	4413      	add	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3308      	adds	r3, #8
 8005912:	429a      	cmp	r2, r3
 8005914:	d104      	bne.n	8005920 <vTaskSwitchContext+0x8c>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <vTaskSwitchContext+0xbc>)
 8005928:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <vTaskSwitchContext+0xbc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	334c      	adds	r3, #76	; 0x4c
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <vTaskSwitchContext+0xc0>)
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	200067fc 	.word	0x200067fc
 8005944:	200067e8 	.word	0x200067e8
 8005948:	200067dc 	.word	0x200067dc
 800594c:	200066d8 	.word	0x200066d8
 8005950:	200066d4 	.word	0x200066d4
 8005954:	2000005c 	.word	0x2000005c

08005958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <vTaskPlaceOnEventList+0x44>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3318      	adds	r3, #24
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe ffc6 	bl	8004918 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800598c:	2101      	movs	r1, #1
 800598e:	6838      	ldr	r0, [r7, #0]
 8005990:	f000 fb4a 	bl	8006028 <prvAddCurrentTaskToDelayedList>
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200066d4 	.word	0x200066d4

080059a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe ffda 	bl	800498a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <xTaskRemoveFromEventList+0xac>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11c      	bne.n	8005a18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe ffd1 	bl	800498a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	2201      	movs	r2, #1
 80059ee:	409a      	lsls	r2, r3
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <xTaskRemoveFromEventList+0xb0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <xTaskRemoveFromEventList+0xb0>)
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <xTaskRemoveFromEventList+0xb4>)
 8005a08:	441a      	add	r2, r3
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7fe ff5d 	bl	80048d0 <vListInsertEnd>
 8005a16:	e005      	b.n	8005a24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	480e      	ldr	r0, [pc, #56]	; (8005a58 <xTaskRemoveFromEventList+0xb8>)
 8005a20:	f7fe ff56 	bl	80048d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <xTaskRemoveFromEventList+0xbc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d905      	bls.n	8005a3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <xTaskRemoveFromEventList+0xc0>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e001      	b.n	8005a42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a42:	697b      	ldr	r3, [r7, #20]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200067fc 	.word	0x200067fc
 8005a50:	200067dc 	.word	0x200067dc
 8005a54:	200066d8 	.word	0x200066d8
 8005a58:	20006794 	.word	0x20006794
 8005a5c:	200066d4 	.word	0x200066d4
 8005a60:	200067e8 	.word	0x200067e8

08005a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <vTaskInternalSetTimeOutState+0x24>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <vTaskInternalSetTimeOutState+0x28>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	605a      	str	r2, [r3, #4]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	200067ec 	.word	0x200067ec
 8005a8c:	200067d8 	.word	0x200067d8

08005a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	613b      	str	r3, [r7, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60fb      	str	r3, [r7, #12]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ad2:	f000 fc3f 	bl	8006354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <xTaskCheckForTimeOut+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d102      	bne.n	8005af6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	e023      	b.n	8005b3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <xTaskCheckForTimeOut+0xc0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d007      	beq.n	8005b12 <xTaskCheckForTimeOut+0x82>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	e015      	b.n	8005b3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d20b      	bcs.n	8005b34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff9b 	bl	8005a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	e004      	b.n	8005b3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b3e:	f000 fc39 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8005b42:	69fb      	ldr	r3, [r7, #28]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200067d8 	.word	0x200067d8
 8005b50:	200067ec 	.word	0x200067ec

08005b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <vTaskMissedYield+0x14>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	200067e8 	.word	0x200067e8

08005b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b74:	f000 f852 	bl	8005c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <prvIdleTask+0x28>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d9f9      	bls.n	8005b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <prvIdleTask+0x2c>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b90:	e7f0      	b.n	8005b74 <prvIdleTask+0x8>
 8005b92:	bf00      	nop
 8005b94:	200066d8 	.word	0x200066d8
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	e00c      	b.n	8005bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <prvInitialiseTaskLists+0x60>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe fe5d 	bl	8004876 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d9ef      	bls.n	8005ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bc8:	480d      	ldr	r0, [pc, #52]	; (8005c00 <prvInitialiseTaskLists+0x64>)
 8005bca:	f7fe fe54 	bl	8004876 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bce:	480d      	ldr	r0, [pc, #52]	; (8005c04 <prvInitialiseTaskLists+0x68>)
 8005bd0:	f7fe fe51 	bl	8004876 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bd4:	480c      	ldr	r0, [pc, #48]	; (8005c08 <prvInitialiseTaskLists+0x6c>)
 8005bd6:	f7fe fe4e 	bl	8004876 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bda:	480c      	ldr	r0, [pc, #48]	; (8005c0c <prvInitialiseTaskLists+0x70>)
 8005bdc:	f7fe fe4b 	bl	8004876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005be0:	480b      	ldr	r0, [pc, #44]	; (8005c10 <prvInitialiseTaskLists+0x74>)
 8005be2:	f7fe fe48 	bl	8004876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <prvInitialiseTaskLists+0x78>)
 8005be8:	4a05      	ldr	r2, [pc, #20]	; (8005c00 <prvInitialiseTaskLists+0x64>)
 8005bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <prvInitialiseTaskLists+0x7c>)
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <prvInitialiseTaskLists+0x68>)
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200066d8 	.word	0x200066d8
 8005c00:	20006764 	.word	0x20006764
 8005c04:	20006778 	.word	0x20006778
 8005c08:	20006794 	.word	0x20006794
 8005c0c:	200067a8 	.word	0x200067a8
 8005c10:	200067c0 	.word	0x200067c0
 8005c14:	2000678c 	.word	0x2000678c
 8005c18:	20006790 	.word	0x20006790

08005c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c22:	e019      	b.n	8005c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c24:	f000 fb96 	bl	8006354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <prvCheckTasksWaitingTermination+0x50>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fea8 	bl	800498a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <prvCheckTasksWaitingTermination+0x54>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <prvCheckTasksWaitingTermination+0x54>)
 8005c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c4e:	f000 fbb1 	bl	80063b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f810 	bl	8005c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e1      	bne.n	8005c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200067a8 	.word	0x200067a8
 8005c70:	200067d4 	.word	0x200067d4
 8005c74:	200067bc 	.word	0x200067bc

08005c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	334c      	adds	r3, #76	; 0x4c
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fef5 	bl	8007a74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fd49 	bl	8006730 <vPortFree>
				vPortFree( pxTCB );
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd46 	bl	8006730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca4:	e018      	b.n	8005cd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d103      	bne.n	8005cb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fd3d 	bl	8006730 <vPortFree>
	}
 8005cb6:	e00f      	b.n	8005cd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d00a      	beq.n	8005cd8 <prvDeleteTCB+0x60>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <prvDeleteTCB+0x5e>
	}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <prvResetNextTaskUnblockTime+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvResetNextTaskUnblockTime+0x3c>)
 8005cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cf8:	e008      	b.n	8005d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <prvResetNextTaskUnblockTime+0x38>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a04      	ldr	r2, [pc, #16]	; (8005d1c <prvResetNextTaskUnblockTime+0x3c>)
 8005d0a:	6013      	str	r3, [r2, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	2000678c 	.word	0x2000678c
 8005d1c:	200067f4 	.word	0x200067f4

08005d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <xTaskGetSchedulerState+0x34>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	e008      	b.n	8005d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <xTaskGetSchedulerState+0x38>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	e001      	b.n	8005d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d46:	687b      	ldr	r3, [r7, #4]
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	200067e0 	.word	0x200067e0
 8005d58:	200067fc 	.word	0x200067fc

08005d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d06e      	beq.n	8005e50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d72:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <xTaskPriorityDisinherit+0x100>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d00a      	beq.n	8005d92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60bb      	str	r3, [r7, #8]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d044      	beq.n	8005e50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d140      	bne.n	8005e50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fdd9 	bl	800498a <uxListRemove>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d115      	bne.n	8005e0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de2:	491f      	ldr	r1, [pc, #124]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xTaskPriorityDisinherit+0xae>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <xTaskPriorityDisinherit+0x108>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4013      	ands	r3, r2
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <xTaskPriorityDisinherit+0x108>)
 8005e08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	f1c3 0207 	rsb	r2, r3, #7
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	2201      	movs	r2, #1
 8005e24:	409a      	lsls	r2, r3
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <xTaskPriorityDisinherit+0x108>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <xTaskPriorityDisinherit+0x108>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005e3e:	441a      	add	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fd42 	bl	80048d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e50:	697b      	ldr	r3, [r7, #20]
	}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200066d4 	.word	0x200066d4
 8005e60:	200066d8 	.word	0x200066d8
 8005e64:	200067dc 	.word	0x200067dc

08005e68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005e72:	f000 fa6f 	bl	8006354 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005e76:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005e82:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e92:	2101      	movs	r1, #1
 8005e94:	6838      	ldr	r0, [r7, #0]
 8005e96:	f000 f8c7 	bl	8006028 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <ulTaskNotifyTake+0x94>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005eaa:	f000 fa83 	bl	80063b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005eae:	f000 fa51 	bl	8006354 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00e      	beq.n	8005ee0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005ed2:	e005      	b.n	8005ee0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005ed4:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	3a01      	subs	r2, #1
 8005edc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <ulTaskNotifyTake+0x90>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8005eea:	f000 fa63 	bl	80063b4 <vPortExitCritical>

		return ulReturn;
 8005eee:	68fb      	ldr	r3, [r7, #12]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	200066d4 	.word	0x200066d4
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f26:	f000 faf7 	bl	8006518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617a      	str	r2, [r7, #20]
 8005f44:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f46:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f48:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f50:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f68:	7ffb      	ldrb	r3, [r7, #31]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d145      	bne.n	8005ffa <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60fb      	str	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f8c:	4b20      	ldr	r3, [pc, #128]	; (8006010 <vTaskNotifyGiveFromISR+0x110>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11c      	bne.n	8005fce <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fcf6 	bl	800498a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <vTaskNotifyGiveFromISR+0x114>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <vTaskNotifyGiveFromISR+0x114>)
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4a16      	ldr	r2, [pc, #88]	; (8006018 <vTaskNotifyGiveFromISR+0x118>)
 8005fbe:	441a      	add	r2, r3
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f7fe fc82 	bl	80048d0 <vListInsertEnd>
 8005fcc:	e005      	b.n	8005fda <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4811      	ldr	r0, [pc, #68]	; (800601c <vTaskNotifyGiveFromISR+0x11c>)
 8005fd6:	f7fe fc7b 	bl	80048d0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <vTaskNotifyGiveFromISR+0x120>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <vTaskNotifyGiveFromISR+0x124>)
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006004:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200067fc 	.word	0x200067fc
 8006014:	200067dc 	.word	0x200067dc
 8006018:	200066d8 	.word	0x200066d8
 800601c:	20006794 	.word	0x20006794
 8006020:	200066d4 	.word	0x200066d4
 8006024:	200067e8 	.word	0x200067e8

08006028 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006032:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	4b28      	ldr	r3, [pc, #160]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fca3 	bl	800498a <uxListRemove>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	2201      	movs	r2, #1
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43da      	mvns	r2, r3
 8006058:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4013      	ands	r3, r2
 800605e:	4a20      	ldr	r2, [pc, #128]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006060:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d10a      	bne.n	8006080 <prvAddCurrentTaskToDelayedList+0x58>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	481a      	ldr	r0, [pc, #104]	; (80060e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800607a:	f7fe fc29 	bl	80048d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800607e:	e026      	b.n	80060ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006088:	4b14      	ldr	r3, [pc, #80]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	429a      	cmp	r2, r3
 8006096:	d209      	bcs.n	80060ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006098:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fe fc37 	bl	8004918 <vListInsert>
}
 80060aa:	e010      	b.n	80060ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe fc2d 	bl	8004918 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d202      	bcs.n	80060ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6013      	str	r3, [r2, #0]
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	200067d8 	.word	0x200067d8
 80060dc:	200066d4 	.word	0x200066d4
 80060e0:	200067dc 	.word	0x200067dc
 80060e4:	200067c0 	.word	0x200067c0
 80060e8:	20006790 	.word	0x20006790
 80060ec:	2000678c 	.word	0x2000678c
 80060f0:	200067f4 	.word	0x200067f4

080060f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b04      	subs	r3, #4
 8006104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800610c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b04      	subs	r3, #4
 8006112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3b04      	subs	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006124:	4a0c      	ldr	r2, [pc, #48]	; (8006158 <pxPortInitialiseStack+0x64>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3b14      	subs	r3, #20
 800612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f06f 0202 	mvn.w	r2, #2
 8006142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b20      	subs	r3, #32
 8006148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800614a:	68fb      	ldr	r3, [r7, #12]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	0800615d 	.word	0x0800615d

0800615c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <prvTaskExitError+0x54>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d00a      	beq.n	8006186 <prvTaskExitError+0x2a>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <prvTaskExitError+0x28>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60bb      	str	r3, [r7, #8]
}
 8006198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800619a:	bf00      	nop
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0fc      	beq.n	800619c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000000c 	.word	0x2000000c
	...

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	4770      	bx	lr
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst2>:
 80061e0:	200066d4 	.word	0x200066d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <prvPortStartFirstTask+0x24>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8814 	msr	CONTROL, r0
 80061fa:	b662      	cpsie	i
 80061fc:	b661      	cpsie	f
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	df00      	svc	0
 8006208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800620a:	bf00      	nop
 800620c:	e000ed08 	.word	0xe000ed08

08006210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006216:	4b46      	ldr	r3, [pc, #280]	; (8006330 <xPortStartScheduler+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <xPortStartScheduler+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10a      	bne.n	8006236 <xPortStartScheduler+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <xPortStartScheduler+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <xPortStartScheduler+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10a      	bne.n	8006256 <xPortStartScheduler+0x46>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <xPortStartScheduler+0x12c>)
 8006258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <xPortStartScheduler+0x130>)
 800627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <xPortStartScheduler+0x134>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	e009      	b.n	800629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <xPortStartScheduler+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <xPortStartScheduler+0x134>)
 800628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d0ef      	beq.n	8006286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <xPortStartScheduler+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d00a      	beq.n	80062c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <xPortStartScheduler+0x134>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <xPortStartScheduler+0x134>)
 80062d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xPortStartScheduler+0x134>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <xPortStartScheduler+0x134>)
 80062dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xPortStartScheduler+0x138>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xPortStartScheduler+0x138>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <xPortStartScheduler+0x138>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <xPortStartScheduler+0x138>)
 80062f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062fe:	f000 f8dd 	bl	80064bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <xPortStartScheduler+0x13c>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006308:	f000 f8fc 	bl	8006504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xPortStartScheduler+0x140>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xPortStartScheduler+0x140>)
 8006312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006318:	f7ff ff66 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800631c:	f7ff faba 	bl	8005894 <vTaskSwitchContext>
	prvTaskExitError();
 8006320:	f7ff ff1c 	bl	800615c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed00 	.word	0xe000ed00
 8006334:	410fc271 	.word	0x410fc271
 8006338:	410fc270 	.word	0x410fc270
 800633c:	e000e400 	.word	0xe000e400
 8006340:	20006800 	.word	0x20006800
 8006344:	20006804 	.word	0x20006804
 8006348:	e000ed20 	.word	0xe000ed20
 800634c:	2000000c 	.word	0x2000000c
 8006350:	e000ef34 	.word	0xe000ef34

08006354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <vPortEnterCritical+0x58>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <vPortEnterCritical+0x58>)
 8006376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <vPortEnterCritical+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10f      	bne.n	80063a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortEnterCritical+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortEnterCritical+0x4a>
	}
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	2000000c 	.word	0x2000000c
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <vPortExitCritical+0x50>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vPortExitCritical+0x24>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	607b      	str	r3, [r7, #4]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <vPortExitCritical+0x50>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <vPortExitCritical+0x50>)
 80063e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <vPortExitCritical+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <vPortExitCritical+0x42>
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f383 8811 	msr	BASEPRI, r3
}
 80063f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
	...

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	f380 8811 	msr	BASEPRI, r0
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f7ff fa28 	bl	8005894 <vTaskSwitchContext>
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f380 8811 	msr	BASEPRI, r0
 800644c:	bc09      	pop	{r0, r3}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	f01e 0f10 	tst.w	lr, #16
 800645a:	bf08      	it	eq
 800645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006460:	f380 8809 	msr	PSP, r0
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst>:
 8006470:	200066d4 	.word	0x200066d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006492:	f7ff f947 	bl	8005724 <xTaskIncrementTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <SysTick_Handler+0x40>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x44>)
 80064da:	3b01      	subs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	20000000 	.word	0x20000000
 80064fc:	10624dd3 	.word	0x10624dd3
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006512:	bf00      	nop
 8006514:	e000ed88 	.word	0xe000ed88

08006518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d914      	bls.n	8006554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <vPortValidateInterruptPriority+0x70>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <vPortValidateInterruptPriority+0x74>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	7afa      	ldrb	r2, [r7, #11]
 800653a:	429a      	cmp	r2, r3
 800653c:	d20a      	bcs.n	8006554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <vPortValidateInterruptPriority+0x78>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <vPortValidateInterruptPriority+0x7c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d90a      	bls.n	800657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	603b      	str	r3, [r7, #0]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vPortValidateInterruptPriority+0x60>
	}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	e000e3f0 	.word	0xe000e3f0
 800658c:	20006800 	.word	0x20006800
 8006590:	e000ed0c 	.word	0xe000ed0c
 8006594:	20006804 	.word	0x20006804

08006598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065a4:	f7ff f814 	bl	80055d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065a8:	4b5b      	ldr	r3, [pc, #364]	; (8006718 <pvPortMalloc+0x180>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065b0:	f000 f920 	bl	80067f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065b4:	4b59      	ldr	r3, [pc, #356]	; (800671c <pvPortMalloc+0x184>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8093 	bne.w	80066e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01d      	beq.n	8006604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065c8:	2208      	movs	r2, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f023 0307 	bic.w	r3, r3, #7
 80065e0:	3308      	adds	r3, #8
 80065e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <pvPortMalloc+0x6c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d06e      	beq.n	80066e8 <pvPortMalloc+0x150>
 800660a:	4b45      	ldr	r3, [pc, #276]	; (8006720 <pvPortMalloc+0x188>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d869      	bhi.n	80066e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006614:	4b43      	ldr	r3, [pc, #268]	; (8006724 <pvPortMalloc+0x18c>)
 8006616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006618:	4b42      	ldr	r3, [pc, #264]	; (8006724 <pvPortMalloc+0x18c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800661e:	e004      	b.n	800662a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d903      	bls.n	800663c <pvPortMalloc+0xa4>
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f1      	bne.n	8006620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800663c:	4b36      	ldr	r3, [pc, #216]	; (8006718 <pvPortMalloc+0x180>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	429a      	cmp	r2, r3
 8006644:	d050      	beq.n	80066e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2208      	movs	r2, #8
 800664c:	4413      	add	r3, r2
 800664e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	2308      	movs	r3, #8
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	429a      	cmp	r2, r3
 8006666:	d91f      	bls.n	80066a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <pvPortMalloc+0xf8>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	613b      	str	r3, [r7, #16]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066a2:	69b8      	ldr	r0, [r7, #24]
 80066a4:	f000 f908 	bl	80068b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <pvPortMalloc+0x188>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <pvPortMalloc+0x188>)
 80066b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <pvPortMalloc+0x188>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <pvPortMalloc+0x190>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <pvPortMalloc+0x188>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <pvPortMalloc+0x190>)
 80066c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <pvPortMalloc+0x184>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <pvPortMalloc+0x194>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a11      	ldr	r2, [pc, #68]	; (800672c <pvPortMalloc+0x194>)
 80066e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066e8:	f7fe ff80 	bl	80055ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <pvPortMalloc+0x174>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60fb      	str	r3, [r7, #12]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <pvPortMalloc+0x172>
	return pvReturn;
 800670c:	69fb      	ldr	r3, [r7, #28]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	2000a410 	.word	0x2000a410
 800671c:	2000a424 	.word	0x2000a424
 8006720:	2000a414 	.word	0x2000a414
 8006724:	2000a408 	.word	0x2000a408
 8006728:	2000a418 	.word	0x2000a418
 800672c:	2000a41c 	.word	0x2000a41c

08006730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d04d      	beq.n	80067de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006742:	2308      	movs	r3, #8
 8006744:	425b      	negs	r3, r3
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <vPortFree+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <vPortFree+0x44>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <vPortFree+0x62>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60bb      	str	r3, [r7, #8]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <vPortFree+0xb8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01e      	beq.n	80067de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11a      	bne.n	80067de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <vPortFree+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067b8:	f7fe ff0a 	bl	80055d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <vPortFree+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <vPortFree+0xbc>)
 80067c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f000 f874 	bl	80068b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <vPortFree+0xc0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <vPortFree+0xc0>)
 80067d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067da:	f7fe ff07 	bl	80055ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000a424 	.word	0x2000a424
 80067ec:	2000a414 	.word	0x2000a414
 80067f0:	2000a420 	.word	0x2000a420

080067f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <prvHeapInit+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <prvHeapInit+0xac>)
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <prvHeapInit+0xb0>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvHeapInit+0xb0>)
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <prvHeapInit+0xb4>)
 8006854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <prvHeapInit+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvHeapInit+0xb4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvHeapInit+0xb4>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <prvHeapInit+0xb8>)
 8006882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <prvHeapInit+0xbc>)
 800688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <prvHeapInit+0xc0>)
 800688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20006808 	.word	0x20006808
 80068a4:	2000a408 	.word	0x2000a408
 80068a8:	2000a410 	.word	0x2000a410
 80068ac:	2000a418 	.word	0x2000a418
 80068b0:	2000a414 	.word	0x2000a414
 80068b4:	2000a424 	.word	0x2000a424

080068b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <prvInsertBlockIntoFreeList+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <prvInsertBlockIntoFreeList+0x14>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d8f7      	bhi.n	80068c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d108      	bne.n	80068fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d118      	bne.n	8006940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d00d      	beq.n	8006936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e008      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e003      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d002      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000a408 	.word	0x2000a408
 8006968:	2000a410 	.word	0x2000a410

0800696c <arm_rfft_32_fast_init_f32>:
 800696c:	b150      	cbz	r0, 8006984 <arm_rfft_32_fast_init_f32+0x18>
 800696e:	b510      	push	{r4, lr}
 8006970:	2110      	movs	r1, #16
 8006972:	4604      	mov	r4, r0
 8006974:	f000 fd58 	bl	8007428 <arm_cfft_init_f32>
 8006978:	b918      	cbnz	r0, 8006982 <arm_rfft_32_fast_init_f32+0x16>
 800697a:	4b04      	ldr	r3, [pc, #16]	; (800698c <arm_rfft_32_fast_init_f32+0x20>)
 800697c:	6163      	str	r3, [r4, #20]
 800697e:	2220      	movs	r2, #32
 8006980:	8222      	strh	r2, [r4, #16]
 8006982:	bd10      	pop	{r4, pc}
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	080207c4 	.word	0x080207c4

08006990 <arm_rfft_64_fast_init_f32>:
 8006990:	b150      	cbz	r0, 80069a8 <arm_rfft_64_fast_init_f32+0x18>
 8006992:	b510      	push	{r4, lr}
 8006994:	2120      	movs	r1, #32
 8006996:	4604      	mov	r4, r0
 8006998:	f000 fd46 	bl	8007428 <arm_cfft_init_f32>
 800699c:	b918      	cbnz	r0, 80069a6 <arm_rfft_64_fast_init_f32+0x16>
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <arm_rfft_64_fast_init_f32+0x20>)
 80069a0:	6163      	str	r3, [r4, #20]
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	8222      	strh	r2, [r4, #16]
 80069a6:	bd10      	pop	{r4, pc}
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	08025044 	.word	0x08025044

080069b4 <arm_rfft_128_fast_init_f32>:
 80069b4:	b150      	cbz	r0, 80069cc <arm_rfft_128_fast_init_f32+0x18>
 80069b6:	b510      	push	{r4, lr}
 80069b8:	2140      	movs	r1, #64	; 0x40
 80069ba:	4604      	mov	r4, r0
 80069bc:	f000 fd34 	bl	8007428 <arm_cfft_init_f32>
 80069c0:	b918      	cbnz	r0, 80069ca <arm_rfft_128_fast_init_f32+0x16>
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <arm_rfft_128_fast_init_f32+0x20>)
 80069c4:	6163      	str	r3, [r4, #20]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	8222      	strh	r2, [r4, #16]
 80069ca:	bd10      	pop	{r4, pc}
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	0801e1c4 	.word	0x0801e1c4

080069d8 <arm_rfft_256_fast_init_f32>:
 80069d8:	b158      	cbz	r0, 80069f2 <arm_rfft_256_fast_init_f32+0x1a>
 80069da:	b510      	push	{r4, lr}
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	4604      	mov	r4, r0
 80069e0:	f000 fd22 	bl	8007428 <arm_cfft_init_f32>
 80069e4:	b920      	cbnz	r0, 80069f0 <arm_rfft_256_fast_init_f32+0x18>
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <arm_rfft_256_fast_init_f32+0x20>)
 80069e8:	6163      	str	r3, [r4, #20]
 80069ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ee:	8222      	strh	r2, [r4, #16]
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	4770      	bx	lr
 80069f8:	080203c4 	.word	0x080203c4

080069fc <arm_rfft_512_fast_init_f32>:
 80069fc:	b160      	cbz	r0, 8006a18 <arm_rfft_512_fast_init_f32+0x1c>
 80069fe:	b510      	push	{r4, lr}
 8006a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a04:	4604      	mov	r4, r0
 8006a06:	f000 fd0f 	bl	8007428 <arm_cfft_init_f32>
 8006a0a:	b920      	cbnz	r0, 8006a16 <arm_rfft_512_fast_init_f32+0x1a>
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <arm_rfft_512_fast_init_f32+0x24>)
 8006a0e:	6163      	str	r3, [r4, #20]
 8006a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a14:	8222      	strh	r2, [r4, #16]
 8006a16:	bd10      	pop	{r4, pc}
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	08024844 	.word	0x08024844

08006a24 <arm_rfft_1024_fast_init_f32>:
 8006a24:	b160      	cbz	r0, 8006a40 <arm_rfft_1024_fast_init_f32+0x1c>
 8006a26:	b510      	push	{r4, lr}
 8006a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	f000 fcfb 	bl	8007428 <arm_cfft_init_f32>
 8006a32:	b920      	cbnz	r0, 8006a3e <arm_rfft_1024_fast_init_f32+0x1a>
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <arm_rfft_1024_fast_init_f32+0x24>)
 8006a36:	6163      	str	r3, [r4, #20]
 8006a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a3c:	8222      	strh	r2, [r4, #16]
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	0801d1c4 	.word	0x0801d1c4

08006a4c <arm_rfft_2048_fast_init_f32>:
 8006a4c:	b160      	cbz	r0, 8006a68 <arm_rfft_2048_fast_init_f32+0x1c>
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a54:	4604      	mov	r4, r0
 8006a56:	f000 fce7 	bl	8007428 <arm_cfft_init_f32>
 8006a5a:	b920      	cbnz	r0, 8006a66 <arm_rfft_2048_fast_init_f32+0x1a>
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <arm_rfft_2048_fast_init_f32+0x24>)
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a64:	8222      	strh	r2, [r4, #16]
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	0801e3c4 	.word	0x0801e3c4

08006a74 <arm_rfft_4096_fast_init_f32>:
 8006a74:	b160      	cbz	r0, 8006a90 <arm_rfft_4096_fast_init_f32+0x1c>
 8006a76:	b510      	push	{r4, lr}
 8006a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	f000 fcd3 	bl	8007428 <arm_cfft_init_f32>
 8006a82:	b920      	cbnz	r0, 8006a8e <arm_rfft_4096_fast_init_f32+0x1a>
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <arm_rfft_4096_fast_init_f32+0x24>)
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a8c:	8222      	strh	r2, [r4, #16]
 8006a8e:	bd10      	pop	{r4, pc}
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	08020844 	.word	0x08020844

08006a9c <arm_rfft_fast_init_f32>:
 8006a9c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006aa0:	d024      	beq.n	8006aec <arm_rfft_fast_init_f32+0x50>
 8006aa2:	d807      	bhi.n	8006ab4 <arm_rfft_fast_init_f32+0x18>
 8006aa4:	2980      	cmp	r1, #128	; 0x80
 8006aa6:	d01c      	beq.n	8006ae2 <arm_rfft_fast_init_f32+0x46>
 8006aa8:	d90c      	bls.n	8006ac4 <arm_rfft_fast_init_f32+0x28>
 8006aaa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006aae:	d11a      	bne.n	8006ae6 <arm_rfft_fast_init_f32+0x4a>
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <arm_rfft_fast_init_f32+0x54>)
 8006ab2:	4718      	bx	r3
 8006ab4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006ab8:	d011      	beq.n	8006ade <arm_rfft_fast_init_f32+0x42>
 8006aba:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006abe:	d107      	bne.n	8006ad0 <arm_rfft_fast_init_f32+0x34>
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <arm_rfft_fast_init_f32+0x58>)
 8006ac2:	4718      	bx	r3
 8006ac4:	2920      	cmp	r1, #32
 8006ac6:	d008      	beq.n	8006ada <arm_rfft_fast_init_f32+0x3e>
 8006ac8:	2940      	cmp	r1, #64	; 0x40
 8006aca:	d10c      	bne.n	8006ae6 <arm_rfft_fast_init_f32+0x4a>
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <arm_rfft_fast_init_f32+0x5c>)
 8006ace:	e7f0      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006ad0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ad4:	d107      	bne.n	8006ae6 <arm_rfft_fast_init_f32+0x4a>
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <arm_rfft_fast_init_f32+0x60>)
 8006ad8:	e7eb      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <arm_rfft_fast_init_f32+0x64>)
 8006adc:	e7e9      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <arm_rfft_fast_init_f32+0x68>)
 8006ae0:	e7e7      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <arm_rfft_fast_init_f32+0x6c>)
 8006ae4:	e7e5      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aea:	4770      	bx	lr
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <arm_rfft_fast_init_f32+0x70>)
 8006aee:	e7e0      	b.n	8006ab2 <arm_rfft_fast_init_f32+0x16>
 8006af0:	080069d9 	.word	0x080069d9
 8006af4:	08006a75 	.word	0x08006a75
 8006af8:	08006991 	.word	0x08006991
 8006afc:	08006a25 	.word	0x08006a25
 8006b00:	0800696d 	.word	0x0800696d
 8006b04:	08006a4d 	.word	0x08006a4d
 8006b08:	080069b5 	.word	0x080069b5
 8006b0c:	080069fd 	.word	0x080069fd

08006b10 <stage_rfft_f32>:
 8006b10:	b410      	push	{r4}
 8006b12:	edd1 7a00 	vldr	s15, [r1]
 8006b16:	ed91 7a01 	vldr	s14, [r1, #4]
 8006b1a:	8804      	ldrh	r4, [r0, #0]
 8006b1c:	6940      	ldr	r0, [r0, #20]
 8006b1e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006b22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b26:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006b2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b32:	3c01      	subs	r4, #1
 8006b34:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006b38:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006b3c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006b40:	ed82 7a00 	vstr	s14, [r2]
 8006b44:	edc2 7a01 	vstr	s15, [r2, #4]
 8006b48:	3010      	adds	r0, #16
 8006b4a:	3210      	adds	r2, #16
 8006b4c:	3b08      	subs	r3, #8
 8006b4e:	3110      	adds	r1, #16
 8006b50:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006b54:	ed93 7a02 	vldr	s14, [r3, #8]
 8006b58:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006b5c:	edd3 4a03 	vldr	s9, [r3, #12]
 8006b60:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006b64:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006b68:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006b6c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006b70:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006b74:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006b78:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006b7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006b80:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006b84:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006b88:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006b8c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006b90:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b98:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006b9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006ba0:	3c01      	subs	r4, #1
 8006ba2:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006ba6:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006baa:	f1a3 0308 	sub.w	r3, r3, #8
 8006bae:	f101 0108 	add.w	r1, r1, #8
 8006bb2:	f100 0008 	add.w	r0, r0, #8
 8006bb6:	f102 0208 	add.w	r2, r2, #8
 8006bba:	d1c9      	bne.n	8006b50 <stage_rfft_f32+0x40>
 8006bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <merge_rfft_f32>:
 8006bc4:	b410      	push	{r4}
 8006bc6:	edd1 7a00 	vldr	s15, [r1]
 8006bca:	edd1 6a01 	vldr	s13, [r1, #4]
 8006bce:	8804      	ldrh	r4, [r0, #0]
 8006bd0:	6940      	ldr	r0, [r0, #20]
 8006bd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006bd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bda:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006bde:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006be2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006be6:	3c01      	subs	r4, #1
 8006be8:	ed82 7a00 	vstr	s14, [r2]
 8006bec:	edc2 7a01 	vstr	s15, [r2, #4]
 8006bf0:	b3dc      	cbz	r4, 8006c6a <merge_rfft_f32+0xa6>
 8006bf2:	00e3      	lsls	r3, r4, #3
 8006bf4:	3b08      	subs	r3, #8
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3010      	adds	r0, #16
 8006bfa:	3210      	adds	r2, #16
 8006bfc:	3110      	adds	r1, #16
 8006bfe:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006c02:	ed93 7a02 	vldr	s14, [r3, #8]
 8006c06:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006c0a:	edd3 4a03 	vldr	s9, [r3, #12]
 8006c0e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006c12:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006c16:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006c1a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006c1e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006c22:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006c26:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006c2a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006c2e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006c32:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006c36:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006c3a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006c3e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006c42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006c4a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006c4e:	3c01      	subs	r4, #1
 8006c50:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006c54:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006c58:	f1a3 0308 	sub.w	r3, r3, #8
 8006c5c:	f101 0108 	add.w	r1, r1, #8
 8006c60:	f100 0008 	add.w	r0, r0, #8
 8006c64:	f102 0208 	add.w	r2, r2, #8
 8006c68:	d1c9      	bne.n	8006bfe <merge_rfft_f32+0x3a>
 8006c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <arm_rfft_fast_f32>:
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	461c      	mov	r4, r3
 8006c76:	4605      	mov	r5, r0
 8006c78:	4616      	mov	r6, r2
 8006c7a:	b14b      	cbz	r3, 8006c90 <arm_rfft_fast_f32+0x20>
 8006c7c:	f7ff ffa2 	bl	8006bc4 <merge_rfft_f32>
 8006c80:	4622      	mov	r2, r4
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	2301      	movs	r3, #1
 8006c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8c:	f000 bb34 	b.w	80072f8 <arm_cfft_f32>
 8006c90:	460f      	mov	r7, r1
 8006c92:	461a      	mov	r2, r3
 8006c94:	2301      	movs	r3, #1
 8006c96:	f000 fb2f 	bl	80072f8 <arm_cfft_f32>
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	f7ff bf34 	b.w	8006b10 <stage_rfft_f32>

08006ca8 <arm_cfft_radix8by2_f32>:
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	ed2d 8b08 	vpush	{d8-d11}
 8006cb0:	f8b0 c000 	ldrh.w	ip, [r0]
 8006cb4:	6842      	ldr	r2, [r0, #4]
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006cbe:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	f000 80b0 	beq.w	8006e2c <arm_cfft_radix8by2_f32+0x184>
 8006ccc:	008c      	lsls	r4, r1, #2
 8006cce:	3410      	adds	r4, #16
 8006cd0:	f100 0310 	add.w	r3, r0, #16
 8006cd4:	1906      	adds	r6, r0, r4
 8006cd6:	3210      	adds	r2, #16
 8006cd8:	4444      	add	r4, r8
 8006cda:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006cde:	f108 0510 	add.w	r5, r8, #16
 8006ce2:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006ce6:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006cea:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006cee:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006cf2:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006cf6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006cfa:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006cfe:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006d02:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006d06:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006d0a:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006d0e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006d12:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006d16:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006d1a:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006d1e:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006d22:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006d26:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006d2a:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006d2e:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006d32:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006d36:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006d3a:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006d3e:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006d42:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006d46:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006d4a:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006d4e:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006d52:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006d56:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006d5a:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006d5e:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006d62:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006d66:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006d6a:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006d6e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006d72:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006d76:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006d7a:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006d7e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006d82:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006d86:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006d8a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006d8e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006d92:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006d96:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006d9a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006d9e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006da2:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006da6:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006daa:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006dae:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006db2:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006db6:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006dba:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006dbe:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006dc2:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006dc6:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006dca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006dce:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006dd2:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006dd6:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006dda:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006dde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006de2:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006de6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006dea:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006dee:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006df2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006df6:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006dfa:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006dfe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006e02:	3310      	adds	r3, #16
 8006e04:	4563      	cmp	r3, ip
 8006e06:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006e0a:	f106 0610 	add.w	r6, r6, #16
 8006e0e:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006e12:	f102 0210 	add.w	r2, r2, #16
 8006e16:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006e1a:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006e1e:	f105 0510 	add.w	r5, r5, #16
 8006e22:	f104 0410 	add.w	r4, r4, #16
 8006e26:	f47f af5c 	bne.w	8006ce2 <arm_cfft_radix8by2_f32+0x3a>
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	b289      	uxth	r1, r1
 8006e2e:	2302      	movs	r3, #2
 8006e30:	9101      	str	r1, [sp, #4]
 8006e32:	f000 fb4b 	bl	80074cc <arm_radix8_butterfly_f32>
 8006e36:	9901      	ldr	r1, [sp, #4]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	b002      	add	sp, #8
 8006e40:	ecbd 8b08 	vpop	{d8-d11}
 8006e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	f000 bb40 	b.w	80074cc <arm_radix8_butterfly_f32>

08006e4c <arm_cfft_radix8by4_f32>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	ed2d 8b0a 	vpush	{d8-d12}
 8006e54:	8803      	ldrh	r3, [r0, #0]
 8006e56:	6842      	ldr	r2, [r0, #4]
 8006e58:	b08d      	sub	sp, #52	; 0x34
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e5e:	4608      	mov	r0, r1
 8006e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e64:	edd1 5a00 	vldr	s11, [r1]
 8006e68:	edd0 7a00 	vldr	s15, [r0]
 8006e6c:	edd1 3a01 	vldr	s7, [r1, #4]
 8006e70:	ed90 5a01 	vldr	s10, [r0, #4]
 8006e74:	9108      	str	r1, [sp, #32]
 8006e76:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8006e7a:	ed96 7a00 	vldr	s14, [r6]
 8006e7e:	ed96 4a01 	vldr	s8, [r6, #4]
 8006e82:	9607      	str	r6, [sp, #28]
 8006e84:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006e88:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8006e8c:	edd8 4a00 	vldr	s9, [r8]
 8006e90:	ed98 3a01 	vldr	s6, [r8, #4]
 8006e94:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006e98:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006e9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	edc0 6a00 	vstr	s13, [r0]
 8006ea6:	edd6 5a01 	vldr	s11, [r6, #4]
 8006eaa:	edd8 2a01 	vldr	s5, [r8, #4]
 8006eae:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006eb2:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006eb6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006eba:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006ebe:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006ec2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006ec6:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006eca:	3408      	adds	r4, #8
 8006ecc:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006ed6:	4637      	mov	r7, r6
 8006ed8:	9402      	str	r4, [sp, #8]
 8006eda:	3708      	adds	r7, #8
 8006edc:	460c      	mov	r4, r1
 8006ede:	3508      	adds	r5, #8
 8006ee0:	0859      	lsrs	r1, r3, #1
 8006ee2:	9109      	str	r1, [sp, #36]	; 0x24
 8006ee4:	9706      	str	r7, [sp, #24]
 8006ee6:	9505      	str	r5, [sp, #20]
 8006ee8:	f102 0708 	add.w	r7, r2, #8
 8006eec:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006ef0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006ef4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006ef8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006efc:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006f00:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006f04:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006f08:	3902      	subs	r1, #2
 8006f0a:	4645      	mov	r5, r8
 8006f0c:	9701      	str	r7, [sp, #4]
 8006f0e:	f102 0c18 	add.w	ip, r2, #24
 8006f12:	f102 0710 	add.w	r7, r2, #16
 8006f16:	3508      	adds	r5, #8
 8006f18:	0849      	lsrs	r1, r1, #1
 8006f1a:	edc0 5a01 	vstr	s11, [r0, #4]
 8006f1e:	9703      	str	r7, [sp, #12]
 8006f20:	edc6 3a00 	vstr	s7, [r6]
 8006f24:	ed86 5a01 	vstr	s10, [r6, #4]
 8006f28:	f8cd c000 	str.w	ip, [sp]
 8006f2c:	ed84 6a00 	vstr	s12, [r4]
 8006f30:	edc4 6a01 	vstr	s13, [r4, #4]
 8006f34:	9504      	str	r5, [sp, #16]
 8006f36:	edc8 7a00 	vstr	s15, [r8]
 8006f3a:	ed88 7a01 	vstr	s14, [r8, #4]
 8006f3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f40:	f000 8138 	beq.w	80071b4 <arm_cfft_radix8by4_f32+0x368>
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	3b0c      	subs	r3, #12
 8006f48:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006f4c:	f106 0510 	add.w	r5, r6, #16
 8006f50:	4626      	mov	r6, r4
 8006f52:	46bb      	mov	fp, r7
 8006f54:	f102 0a20 	add.w	sl, r2, #32
 8006f58:	f102 0930 	add.w	r9, r2, #48	; 0x30
 8006f5c:	f106 0710 	add.w	r7, r6, #16
 8006f60:	4443      	add	r3, r8
 8006f62:	f100 0e10 	add.w	lr, r0, #16
 8006f66:	3c0c      	subs	r4, #12
 8006f68:	f1a8 060c 	sub.w	r6, r8, #12
 8006f6c:	f108 0210 	add.w	r2, r8, #16
 8006f70:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006f74:	ed57 5a02 	vldr	s11, [r7, #-8]
 8006f78:	ed55 7a02 	vldr	s15, [r5, #-8]
 8006f7c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006f80:	ed57 6a01 	vldr	s13, [r7, #-4]
 8006f84:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006f88:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006f8c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8006f90:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006f94:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006f98:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006f9c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006fa0:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006fa4:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006fa8:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006fac:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006fb0:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006fb4:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006fb8:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006fbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006fc0:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006fc4:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006fc8:	ed96 7a02 	vldr	s14, [r6, #8]
 8006fcc:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006fd0:	ed94 ba02 	vldr	s22, [r4, #8]
 8006fd4:	edd3 9a02 	vldr	s19, [r3, #8]
 8006fd8:	edd6 2a01 	vldr	s5, [r6, #4]
 8006fdc:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006fe0:	ed93 5a01 	vldr	s10, [r3, #4]
 8006fe4:	edd4 0a01 	vldr	s1, [r4, #4]
 8006fe8:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006fec:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006ff0:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006ff4:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006ff8:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006ffc:	ee79 2a62 	vsub.f32	s5, s18, s5
 8007000:	ed8c 7a02 	vstr	s14, [ip, #8]
 8007004:	ed94 7a01 	vldr	s14, [r4, #4]
 8007008:	edd3 8a01 	vldr	s17, [r3, #4]
 800700c:	ee34 7a87 	vadd.f32	s14, s9, s14
 8007010:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8007014:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007018:	ee32 9a60 	vsub.f32	s18, s4, s1
 800701c:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007020:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8007024:	ed1b aa02 	vldr	s20, [fp, #-8]
 8007028:	ee73 8a22 	vadd.f32	s17, s6, s5
 800702c:	ee39 9a05 	vadd.f32	s18, s18, s10
 8007030:	ee7a aac1 	vsub.f32	s21, s21, s2
 8007034:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007038:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800703c:	ee69 ba07 	vmul.f32	s23, s18, s14
 8007040:	ee6a aa87 	vmul.f32	s21, s21, s14
 8007044:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007048:	ee63 ca87 	vmul.f32	s25, s7, s14
 800704c:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007050:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8007054:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007058:	ee73 3aea 	vsub.f32	s7, s7, s21
 800705c:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007060:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007064:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007068:	ee34 4a67 	vsub.f32	s8, s8, s15
 800706c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007070:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007074:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007078:	ed05 7a02 	vstr	s14, [r5, #-8]
 800707c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8007080:	edc4 8a01 	vstr	s17, [r4, #4]
 8007084:	ed84 aa02 	vstr	s20, [r4, #8]
 8007088:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800708c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007090:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007094:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007098:	ee34 4a61 	vsub.f32	s8, s8, s3
 800709c:	ee36 6a41 	vsub.f32	s12, s12, s2
 80070a0:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80070a4:	ee66 9a26 	vmul.f32	s19, s12, s13
 80070a8:	ee24 9a23 	vmul.f32	s18, s8, s7
 80070ac:	ee26 6a23 	vmul.f32	s12, s12, s7
 80070b0:	ee24 4a26 	vmul.f32	s8, s8, s13
 80070b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80070b8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80070bc:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80070c0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80070c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80070c8:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80070cc:	ee79 3a29 	vadd.f32	s7, s18, s19
 80070d0:	ee75 6a60 	vsub.f32	s13, s10, s1
 80070d4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80070d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80070dc:	ed47 3a02 	vstr	s7, [r7, #-8]
 80070e0:	ed07 6a01 	vstr	s12, [r7, #-4]
 80070e4:	ed86 7a01 	vstr	s14, [r6, #4]
 80070e8:	ed86 4a02 	vstr	s8, [r6, #8]
 80070ec:	ee35 6a81 	vadd.f32	s12, s11, s2
 80070f0:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80070f4:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 80070f8:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 80070fc:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007100:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8007104:	ee67 2a26 	vmul.f32	s5, s14, s13
 8007108:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800710c:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007110:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007114:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007118:	ee27 7a25 	vmul.f32	s14, s14, s11
 800711c:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007120:	ee23 3a25 	vmul.f32	s6, s6, s11
 8007124:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007128:	ee75 5a24 	vadd.f32	s11, s10, s9
 800712c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007130:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007134:	3901      	subs	r1, #1
 8007136:	ed42 5a02 	vstr	s11, [r2, #-8]
 800713a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800713e:	f10e 0e08 	add.w	lr, lr, #8
 8007142:	ed83 3a02 	vstr	s6, [r3, #8]
 8007146:	ed83 7a01 	vstr	s14, [r3, #4]
 800714a:	f1ac 0c08 	sub.w	ip, ip, #8
 800714e:	f10b 0b08 	add.w	fp, fp, #8
 8007152:	f105 0508 	add.w	r5, r5, #8
 8007156:	f1a4 0408 	sub.w	r4, r4, #8
 800715a:	f10a 0a10 	add.w	sl, sl, #16
 800715e:	f107 0708 	add.w	r7, r7, #8
 8007162:	f1a6 0608 	sub.w	r6, r6, #8
 8007166:	f109 0918 	add.w	r9, r9, #24
 800716a:	f102 0208 	add.w	r2, r2, #8
 800716e:	f1a3 0308 	sub.w	r3, r3, #8
 8007172:	f47f aefd 	bne.w	8006f70 <arm_cfft_radix8by4_f32+0x124>
 8007176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007178:	9902      	ldr	r1, [sp, #8]
 800717a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800717e:	9102      	str	r1, [sp, #8]
 8007180:	9901      	ldr	r1, [sp, #4]
 8007182:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007186:	9101      	str	r1, [sp, #4]
 8007188:	9906      	ldr	r1, [sp, #24]
 800718a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800718e:	9106      	str	r1, [sp, #24]
 8007190:	9903      	ldr	r1, [sp, #12]
 8007192:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8007196:	9103      	str	r1, [sp, #12]
 8007198:	9905      	ldr	r1, [sp, #20]
 800719a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800719e:	9105      	str	r1, [sp, #20]
 80071a0:	9904      	ldr	r1, [sp, #16]
 80071a2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80071a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80071aa:	9204      	str	r2, [sp, #16]
 80071ac:	9a00      	ldr	r2, [sp, #0]
 80071ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	9902      	ldr	r1, [sp, #8]
 80071b6:	9d05      	ldr	r5, [sp, #20]
 80071b8:	ed91 4a00 	vldr	s8, [r1]
 80071bc:	edd5 6a00 	vldr	s13, [r5]
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	9c04      	ldr	r4, [sp, #16]
 80071c4:	edd3 7a00 	vldr	s15, [r3]
 80071c8:	ed94 3a00 	vldr	s6, [r4]
 80071cc:	edd5 4a01 	vldr	s9, [r5, #4]
 80071d0:	edd1 3a01 	vldr	s7, [r1, #4]
 80071d4:	ed94 2a01 	vldr	s4, [r4, #4]
 80071d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80071dc:	9a01      	ldr	r2, [sp, #4]
 80071de:	ee34 6a26 	vadd.f32	s12, s8, s13
 80071e2:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80071e6:	ee37 5a86 	vadd.f32	s10, s15, s12
 80071ea:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80071ee:	ee35 5a03 	vadd.f32	s10, s10, s6
 80071f2:	ee74 6a66 	vsub.f32	s13, s8, s13
 80071f6:	ed81 5a00 	vstr	s10, [r1]
 80071fa:	ed93 5a01 	vldr	s10, [r3, #4]
 80071fe:	edd4 4a01 	vldr	s9, [r4, #4]
 8007202:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007206:	ee37 4a26 	vadd.f32	s8, s14, s13
 800720a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800720e:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007212:	ed81 5a01 	vstr	s10, [r1, #4]
 8007216:	edd2 1a00 	vldr	s3, [r2]
 800721a:	edd2 2a01 	vldr	s5, [r2, #4]
 800721e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8007222:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007226:	ee34 4a42 	vsub.f32	s8, s8, s4
 800722a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800722e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007232:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007236:	ee65 2a22 	vmul.f32	s5, s10, s5
 800723a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800723e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007242:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007246:	edc3 2a00 	vstr	s5, [r3]
 800724a:	ed83 5a01 	vstr	s10, [r3, #4]
 800724e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007258:	ed93 4a01 	vldr	s8, [r3, #4]
 800725c:	ed93 5a00 	vldr	s10, [r3]
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007266:	ee66 4a05 	vmul.f32	s9, s12, s10
 800726a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800726e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007272:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007276:	ee35 6a46 	vsub.f32	s12, s10, s12
 800727a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800727e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007282:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007286:	ed85 6a01 	vstr	s12, [r5, #4]
 800728a:	edc5 5a00 	vstr	s11, [r5]
 800728e:	edd3 5a01 	vldr	s11, [r3, #4]
 8007292:	edd3 6a00 	vldr	s13, [r3]
 8007296:	ee37 7a02 	vadd.f32	s14, s14, s4
 800729a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800729e:	ee27 6a26 	vmul.f32	s12, s14, s13
 80072a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80072a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80072aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80072ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80072b2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80072b6:	ed84 7a01 	vstr	s14, [r4, #4]
 80072ba:	edc4 7a00 	vstr	s15, [r4]
 80072be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072c0:	9100      	str	r1, [sp, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	2304      	movs	r3, #4
 80072c6:	f000 f901 	bl	80074cc <arm_radix8_butterfly_f32>
 80072ca:	9807      	ldr	r0, [sp, #28]
 80072cc:	9900      	ldr	r1, [sp, #0]
 80072ce:	6862      	ldr	r2, [r4, #4]
 80072d0:	2304      	movs	r3, #4
 80072d2:	f000 f8fb 	bl	80074cc <arm_radix8_butterfly_f32>
 80072d6:	9808      	ldr	r0, [sp, #32]
 80072d8:	9900      	ldr	r1, [sp, #0]
 80072da:	6862      	ldr	r2, [r4, #4]
 80072dc:	2304      	movs	r3, #4
 80072de:	f000 f8f5 	bl	80074cc <arm_radix8_butterfly_f32>
 80072e2:	9900      	ldr	r1, [sp, #0]
 80072e4:	6862      	ldr	r2, [r4, #4]
 80072e6:	4640      	mov	r0, r8
 80072e8:	2304      	movs	r3, #4
 80072ea:	b00d      	add	sp, #52	; 0x34
 80072ec:	ecbd 8b0a 	vpop	{d8-d12}
 80072f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	f000 b8ea 	b.w	80074cc <arm_radix8_butterfly_f32>

080072f8 <arm_cfft_f32>:
 80072f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	2a01      	cmp	r2, #1
 80072fe:	8805      	ldrh	r5, [r0, #0]
 8007300:	4607      	mov	r7, r0
 8007302:	4690      	mov	r8, r2
 8007304:	460c      	mov	r4, r1
 8007306:	4699      	mov	r9, r3
 8007308:	d05c      	beq.n	80073c4 <arm_cfft_f32+0xcc>
 800730a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800730e:	d054      	beq.n	80073ba <arm_cfft_f32+0xc2>
 8007310:	d810      	bhi.n	8007334 <arm_cfft_f32+0x3c>
 8007312:	2d40      	cmp	r5, #64	; 0x40
 8007314:	d015      	beq.n	8007342 <arm_cfft_f32+0x4a>
 8007316:	d94c      	bls.n	80073b2 <arm_cfft_f32+0xba>
 8007318:	2d80      	cmp	r5, #128	; 0x80
 800731a:	d103      	bne.n	8007324 <arm_cfft_f32+0x2c>
 800731c:	4621      	mov	r1, r4
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff fcc2 	bl	8006ca8 <arm_cfft_radix8by2_f32>
 8007324:	f1b9 0f00 	cmp.w	r9, #0
 8007328:	d114      	bne.n	8007354 <arm_cfft_f32+0x5c>
 800732a:	f1b8 0f01 	cmp.w	r8, #1
 800732e:	d019      	beq.n	8007364 <arm_cfft_f32+0x6c>
 8007330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007334:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007338:	d03f      	beq.n	80073ba <arm_cfft_f32+0xc2>
 800733a:	d933      	bls.n	80073a4 <arm_cfft_f32+0xac>
 800733c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007340:	d1f0      	bne.n	8007324 <arm_cfft_f32+0x2c>
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	2301      	movs	r3, #1
 8007346:	4629      	mov	r1, r5
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f8bf 	bl	80074cc <arm_radix8_butterfly_f32>
 800734e:	f1b9 0f00 	cmp.w	r9, #0
 8007352:	d0ea      	beq.n	800732a <arm_cfft_f32+0x32>
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	89b9      	ldrh	r1, [r7, #12]
 8007358:	4620      	mov	r0, r4
 800735a:	f000 f845 	bl	80073e8 <arm_bitreversal_32>
 800735e:	f1b8 0f01 	cmp.w	r8, #1
 8007362:	d1e5      	bne.n	8007330 <arm_cfft_f32+0x38>
 8007364:	ee07 5a90 	vmov	s15, r5
 8007368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007370:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007374:	2d00      	cmp	r5, #0
 8007376:	d0db      	beq.n	8007330 <arm_cfft_f32+0x38>
 8007378:	f104 0108 	add.w	r1, r4, #8
 800737c:	2300      	movs	r3, #0
 800737e:	3301      	adds	r3, #1
 8007380:	429d      	cmp	r5, r3
 8007382:	f101 0108 	add.w	r1, r1, #8
 8007386:	ed11 7a04 	vldr	s14, [r1, #-16]
 800738a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800738e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007392:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007396:	ed01 7a04 	vstr	s14, [r1, #-16]
 800739a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800739e:	d1ee      	bne.n	800737e <arm_cfft_f32+0x86>
 80073a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80073a8:	d0cb      	beq.n	8007342 <arm_cfft_f32+0x4a>
 80073aa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80073ae:	d0b5      	beq.n	800731c <arm_cfft_f32+0x24>
 80073b0:	e7b8      	b.n	8007324 <arm_cfft_f32+0x2c>
 80073b2:	2d10      	cmp	r5, #16
 80073b4:	d0b2      	beq.n	800731c <arm_cfft_f32+0x24>
 80073b6:	2d20      	cmp	r5, #32
 80073b8:	d1b4      	bne.n	8007324 <arm_cfft_f32+0x2c>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff fd45 	bl	8006e4c <arm_cfft_radix8by4_f32>
 80073c2:	e7af      	b.n	8007324 <arm_cfft_f32+0x2c>
 80073c4:	b16d      	cbz	r5, 80073e2 <arm_cfft_f32+0xea>
 80073c6:	310c      	adds	r1, #12
 80073c8:	2600      	movs	r6, #0
 80073ca:	ed51 7a02 	vldr	s15, [r1, #-8]
 80073ce:	3601      	adds	r6, #1
 80073d0:	eef1 7a67 	vneg.f32	s15, s15
 80073d4:	42b5      	cmp	r5, r6
 80073d6:	ed41 7a02 	vstr	s15, [r1, #-8]
 80073da:	f101 0108 	add.w	r1, r1, #8
 80073de:	d1f4      	bne.n	80073ca <arm_cfft_f32+0xd2>
 80073e0:	e793      	b.n	800730a <arm_cfft_f32+0x12>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0a4      	beq.n	8007330 <arm_cfft_f32+0x38>
 80073e6:	e7b5      	b.n	8007354 <arm_cfft_f32+0x5c>

080073e8 <arm_bitreversal_32>:
 80073e8:	b1e9      	cbz	r1, 8007426 <arm_bitreversal_32+0x3e>
 80073ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ec:	2500      	movs	r5, #0
 80073ee:	f102 0e02 	add.w	lr, r2, #2
 80073f2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80073f6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80073fa:	08a4      	lsrs	r4, r4, #2
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8007402:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007406:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800740a:	00a6      	lsls	r6, r4, #2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8007412:	3304      	adds	r3, #4
 8007414:	1d34      	adds	r4, r6, #4
 8007416:	3502      	adds	r5, #2
 8007418:	58c6      	ldr	r6, [r0, r3]
 800741a:	5907      	ldr	r7, [r0, r4]
 800741c:	50c7      	str	r7, [r0, r3]
 800741e:	428d      	cmp	r5, r1
 8007420:	5106      	str	r6, [r0, r4]
 8007422:	d3e6      	bcc.n	80073f2 <arm_bitreversal_32+0xa>
 8007424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007426:	4770      	bx	lr

08007428 <arm_cfft_init_f32>:
 8007428:	4603      	mov	r3, r0
 800742a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800742e:	f04f 0000 	mov.w	r0, #0
 8007432:	b410      	push	{r4}
 8007434:	8019      	strh	r1, [r3, #0]
 8007436:	6058      	str	r0, [r3, #4]
 8007438:	d033      	beq.n	80074a2 <arm_cfft_init_f32+0x7a>
 800743a:	d918      	bls.n	800746e <arm_cfft_init_f32+0x46>
 800743c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007440:	d027      	beq.n	8007492 <arm_cfft_init_f32+0x6a>
 8007442:	d90c      	bls.n	800745e <arm_cfft_init_f32+0x36>
 8007444:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007448:	d11e      	bne.n	8007488 <arm_cfft_init_f32+0x60>
 800744a:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <arm_cfft_init_f32+0x80>)
 800744c:	8994      	ldrh	r4, [r2, #12]
 800744e:	819c      	strh	r4, [r3, #12]
 8007450:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8007454:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8007458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007462:	d018      	beq.n	8007496 <arm_cfft_init_f32+0x6e>
 8007464:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007468:	d10e      	bne.n	8007488 <arm_cfft_init_f32+0x60>
 800746a:	4a10      	ldr	r2, [pc, #64]	; (80074ac <arm_cfft_init_f32+0x84>)
 800746c:	e7ee      	b.n	800744c <arm_cfft_init_f32+0x24>
 800746e:	2940      	cmp	r1, #64	; 0x40
 8007470:	d013      	beq.n	800749a <arm_cfft_init_f32+0x72>
 8007472:	d903      	bls.n	800747c <arm_cfft_init_f32+0x54>
 8007474:	2980      	cmp	r1, #128	; 0x80
 8007476:	d107      	bne.n	8007488 <arm_cfft_init_f32+0x60>
 8007478:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <arm_cfft_init_f32+0x88>)
 800747a:	e7e7      	b.n	800744c <arm_cfft_init_f32+0x24>
 800747c:	2910      	cmp	r1, #16
 800747e:	d00e      	beq.n	800749e <arm_cfft_init_f32+0x76>
 8007480:	2920      	cmp	r1, #32
 8007482:	d101      	bne.n	8007488 <arm_cfft_init_f32+0x60>
 8007484:	4a0b      	ldr	r2, [pc, #44]	; (80074b4 <arm_cfft_init_f32+0x8c>)
 8007486:	e7e1      	b.n	800744c <arm_cfft_init_f32+0x24>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <arm_cfft_init_f32+0x90>)
 8007494:	e7da      	b.n	800744c <arm_cfft_init_f32+0x24>
 8007496:	4a09      	ldr	r2, [pc, #36]	; (80074bc <arm_cfft_init_f32+0x94>)
 8007498:	e7d8      	b.n	800744c <arm_cfft_init_f32+0x24>
 800749a:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <arm_cfft_init_f32+0x98>)
 800749c:	e7d6      	b.n	800744c <arm_cfft_init_f32+0x24>
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <arm_cfft_init_f32+0x9c>)
 80074a0:	e7d4      	b.n	800744c <arm_cfft_init_f32+0x24>
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <arm_cfft_init_f32+0xa0>)
 80074a4:	e7d2      	b.n	800744c <arm_cfft_init_f32+0x24>
 80074a6:	bf00      	nop
 80074a8:	080251a4 	.word	0x080251a4
 80074ac:	08025144 	.word	0x08025144
 80074b0:	08025154 	.word	0x08025154
 80074b4:	08025194 	.word	0x08025194
 80074b8:	08025174 	.word	0x08025174
 80074bc:	080251b4 	.word	0x080251b4
 80074c0:	080251c4 	.word	0x080251c4
 80074c4:	08025164 	.word	0x08025164
 80074c8:	08025184 	.word	0x08025184

080074cc <arm_radix8_butterfly_f32>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	ed2d 8b10 	vpush	{d8-d15}
 80074d4:	b093      	sub	sp, #76	; 0x4c
 80074d6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 80074da:	4603      	mov	r3, r0
 80074dc:	3304      	adds	r3, #4
 80074de:	ed9f bac0 	vldr	s22, [pc, #768]	; 80077e0 <arm_radix8_butterfly_f32+0x314>
 80074e2:	9010      	str	r0, [sp, #64]	; 0x40
 80074e4:	468b      	mov	fp, r1
 80074e6:	9311      	str	r3, [sp, #68]	; 0x44
 80074e8:	4689      	mov	r9, r1
 80074ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80074ec:	ea4f 05db 	mov.w	r5, fp, lsr #3
 80074f0:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80074f4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 80074f8:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 80074fc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8007500:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8007504:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8007508:	9100      	str	r1, [sp, #0]
 800750a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800750e:	f108 0004 	add.w	r0, r8, #4
 8007512:	f10e 0104 	add.w	r1, lr, #4
 8007516:	462e      	mov	r6, r5
 8007518:	4420      	add	r0, r4
 800751a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800751e:	4421      	add	r1, r4
 8007520:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8007524:	960d      	str	r6, [sp, #52]	; 0x34
 8007526:	9402      	str	r4, [sp, #8]
 8007528:	012c      	lsls	r4, r5, #4
 800752a:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800752e:	9403      	str	r4, [sp, #12]
 8007530:	00ec      	lsls	r4, r5, #3
 8007532:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007534:	9404      	str	r4, [sp, #16]
 8007536:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800753a:	9405      	str	r4, [sp, #20]
 800753c:	016c      	lsls	r4, r5, #5
 800753e:	9401      	str	r4, [sp, #4]
 8007540:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007542:	9c00      	ldr	r4, [sp, #0]
 8007544:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8007548:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800754c:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007550:	f04f 0c00 	mov.w	ip, #0
 8007554:	edd6 6a00 	vldr	s13, [r6]
 8007558:	edd7 1a00 	vldr	s3, [r7]
 800755c:	ed15 aa01 	vldr	s20, [r5, #-4]
 8007560:	edd2 5a00 	vldr	s11, [r2]
 8007564:	ed51 9a01 	vldr	s19, [r1, #-4]
 8007568:	ed94 6a00 	vldr	s12, [r4]
 800756c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8007570:	ed93 3a00 	vldr	s6, [r3]
 8007574:	ee39 0a86 	vadd.f32	s0, s19, s12
 8007578:	ee33 2a21 	vadd.f32	s4, s6, s3
 800757c:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8007580:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8007584:	ee35 7a02 	vadd.f32	s14, s10, s4
 8007588:	ee34 4a80 	vadd.f32	s8, s9, s0
 800758c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007590:	ee74 6a07 	vadd.f32	s13, s8, s14
 8007594:	ee34 4a47 	vsub.f32	s8, s8, s14
 8007598:	ed45 6a01 	vstr	s13, [r5, #-4]
 800759c:	ed82 4a00 	vstr	s8, [r2]
 80075a0:	edd0 6a00 	vldr	s13, [r0]
 80075a4:	ed96 9a01 	vldr	s18, [r6, #4]
 80075a8:	edd3 2a01 	vldr	s5, [r3, #4]
 80075ac:	edd7 8a01 	vldr	s17, [r7, #4]
 80075b0:	edd5 0a00 	vldr	s1, [r5]
 80075b4:	edd2 3a01 	vldr	s7, [r2, #4]
 80075b8:	ed94 8a01 	vldr	s16, [r4, #4]
 80075bc:	ed91 7a00 	vldr	s14, [r1]
 80075c0:	ee33 3a61 	vsub.f32	s6, s6, s3
 80075c4:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80075c8:	ee72 aae8 	vsub.f32	s21, s5, s17
 80075cc:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80075d0:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80075d4:	ee77 7a83 	vadd.f32	s15, s15, s6
 80075d8:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80075dc:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80075e0:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80075e4:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80075e8:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80075ec:	ee77 0a08 	vadd.f32	s1, s14, s16
 80075f0:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80075f4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80075f8:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80075fc:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8007600:	ee76 6a89 	vadd.f32	s13, s13, s18
 8007604:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007608:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800760c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007610:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007614:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007618:	ee33 2a20 	vadd.f32	s4, s6, s1
 800761c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007620:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007624:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007628:	ee77 0a01 	vadd.f32	s1, s14, s2
 800762c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8007630:	ee37 7a41 	vsub.f32	s14, s14, s2
 8007634:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007638:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800763c:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007640:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007644:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007648:	ee33 1a45 	vsub.f32	s2, s6, s10
 800764c:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007650:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007654:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8007658:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800765c:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007660:	ee34 6a67 	vsub.f32	s12, s8, s15
 8007664:	ee75 4a87 	vadd.f32	s9, s11, s14
 8007668:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800766c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007670:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007674:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8007678:	44dc      	add	ip, fp
 800767a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800767e:	45e1      	cmp	r9, ip
 8007680:	ed85 8a00 	vstr	s16, [r5]
 8007684:	ed82 2a01 	vstr	s4, [r2, #4]
 8007688:	4455      	add	r5, sl
 800768a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800768e:	4452      	add	r2, sl
 8007690:	edc4 6a00 	vstr	s13, [r4]
 8007694:	ed81 1a00 	vstr	s2, [r1]
 8007698:	ed84 5a01 	vstr	s10, [r4, #4]
 800769c:	4451      	add	r1, sl
 800769e:	ed00 3a01 	vstr	s6, [r0, #-4]
 80076a2:	4454      	add	r4, sl
 80076a4:	edc7 2a00 	vstr	s5, [r7]
 80076a8:	edc6 4a00 	vstr	s9, [r6]
 80076ac:	ed83 7a00 	vstr	s14, [r3]
 80076b0:	edc0 5a00 	vstr	s11, [r0]
 80076b4:	edc7 3a01 	vstr	s7, [r7, #4]
 80076b8:	4450      	add	r0, sl
 80076ba:	ed86 6a01 	vstr	s12, [r6, #4]
 80076be:	4457      	add	r7, sl
 80076c0:	edc3 7a01 	vstr	s15, [r3, #4]
 80076c4:	4456      	add	r6, sl
 80076c6:	4453      	add	r3, sl
 80076c8:	f63f af44 	bhi.w	8007554 <arm_radix8_butterfly_f32+0x88>
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	2b07      	cmp	r3, #7
 80076d0:	f240 81c3 	bls.w	8007a5a <arm_radix8_butterfly_f32+0x58e>
 80076d4:	9805      	ldr	r0, [sp, #20]
 80076d6:	9a01      	ldr	r2, [sp, #4]
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	9d04      	ldr	r5, [sp, #16]
 80076dc:	9902      	ldr	r1, [sp, #8]
 80076de:	f100 0c08 	add.w	ip, r0, #8
 80076e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80076e4:	3208      	adds	r2, #8
 80076e6:	1882      	adds	r2, r0, r2
 80076e8:	3308      	adds	r3, #8
 80076ea:	920a      	str	r2, [sp, #40]	; 0x28
 80076ec:	4602      	mov	r2, r0
 80076ee:	18d3      	adds	r3, r2, r3
 80076f0:	3108      	adds	r1, #8
 80076f2:	3508      	adds	r5, #8
 80076f4:	1851      	adds	r1, r2, r1
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	4613      	mov	r3, r2
 80076fa:	442a      	add	r2, r5
 80076fc:	9206      	str	r2, [sp, #24]
 80076fe:	461a      	mov	r2, r3
 8007700:	4462      	add	r2, ip
 8007702:	f10e 0e0c 	add.w	lr, lr, #12
 8007706:	9205      	str	r2, [sp, #20]
 8007708:	461a      	mov	r2, r3
 800770a:	4472      	add	r2, lr
 800770c:	f108 0808 	add.w	r8, r8, #8
 8007710:	330c      	adds	r3, #12
 8007712:	4440      	add	r0, r8
 8007714:	f04f 0e00 	mov.w	lr, #0
 8007718:	9203      	str	r2, [sp, #12]
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	465a      	mov	r2, fp
 800771e:	464b      	mov	r3, r9
 8007720:	46f3      	mov	fp, lr
 8007722:	46d1      	mov	r9, sl
 8007724:	9009      	str	r0, [sp, #36]	; 0x24
 8007726:	9108      	str	r1, [sp, #32]
 8007728:	f04f 0801 	mov.w	r8, #1
 800772c:	469a      	mov	sl, r3
 800772e:	4696      	mov	lr, r2
 8007730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007732:	449b      	add	fp, r3
 8007734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007736:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800773a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800773e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8007742:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8007746:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800774a:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800774e:	930c      	str	r3, [sp, #48]	; 0x30
 8007750:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8007754:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8007758:	920b      	str	r2, [sp, #44]	; 0x2c
 800775a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800775e:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8007762:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8007766:	9202      	str	r2, [sp, #8]
 8007768:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	edd3 da01 	vldr	s27, [r3, #4]
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	edd0 7a00 	vldr	s15, [r0]
 800777a:	ed93 da01 	vldr	s26, [r3, #4]
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	edcd 7a02 	vstr	s15, [sp, #8]
 8007784:	ed93 ca01 	vldr	s24, [r3, #4]
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	eddc ca01 	vldr	s25, [ip, #4]
 800778e:	edd3 7a00 	vldr	s15, [r3]
 8007792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007794:	edcd 7a01 	vstr	s15, [sp, #4]
 8007798:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800779c:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 80077a0:	9200      	str	r2, [sp, #0]
 80077a2:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 80077a6:	edd3 7a00 	vldr	s15, [r3]
 80077aa:	ed92 fa01 	vldr	s30, [r2, #4]
 80077ae:	9a00      	ldr	r2, [sp, #0]
 80077b0:	edd1 ea01 	vldr	s29, [r1, #4]
 80077b4:	ed92 ea01 	vldr	s28, [r2, #4]
 80077b8:	edd7 ba00 	vldr	s23, [r7]
 80077bc:	edd6 aa00 	vldr	s21, [r6]
 80077c0:	ed95 aa00 	vldr	s20, [r5]
 80077c4:	edd4 9a00 	vldr	s19, [r4]
 80077c8:	edcd 7a00 	vstr	s15, [sp]
 80077cc:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 80077d0:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80077d4:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80077d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077dc:	46c4      	mov	ip, r8
 80077de:	e001      	b.n	80077e4 <arm_radix8_butterfly_f32+0x318>
 80077e0:	3f3504f3 	.word	0x3f3504f3
 80077e4:	ed91 6a00 	vldr	s12, [r1]
 80077e8:	ed93 5a00 	vldr	s10, [r3]
 80077ec:	edd0 fa00 	vldr	s31, [r0]
 80077f0:	edd4 7a00 	vldr	s15, [r4]
 80077f4:	ed95 7a00 	vldr	s14, [r5]
 80077f8:	ed56 3a01 	vldr	s7, [r6, #-4]
 80077fc:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007800:	ed92 2a00 	vldr	s4, [r2]
 8007804:	ed96 0a00 	vldr	s0, [r6]
 8007808:	ee33 8a85 	vadd.f32	s16, s7, s10
 800780c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007810:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007814:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007818:	ee78 1a04 	vadd.f32	s3, s16, s8
 800781c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007820:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007824:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800782c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007830:	edd4 8a01 	vldr	s17, [r4, #4]
 8007834:	ed92 9a01 	vldr	s18, [r2, #4]
 8007838:	edd7 0a00 	vldr	s1, [r7]
 800783c:	edd1 2a01 	vldr	s5, [r1, #4]
 8007840:	ed95 7a01 	vldr	s14, [r5, #4]
 8007844:	ed93 6a01 	vldr	s12, [r3, #4]
 8007848:	edd0 5a01 	vldr	s11, [r0, #4]
 800784c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007850:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007854:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007858:	ee78 fac7 	vsub.f32	s31, s17, s14
 800785c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007860:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007864:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007868:	ee79 2a22 	vadd.f32	s5, s18, s5
 800786c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007870:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007874:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007878:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800787c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007880:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007884:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007888:	ee72 fa87 	vadd.f32	s31, s5, s14
 800788c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007890:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007894:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007898:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800789c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80078a0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80078a4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80078a8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80078ac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80078b0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80078b4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80078b8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80078bc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80078c0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80078c4:	ee32 4a64 	vsub.f32	s8, s4, s9
 80078c8:	ee73 8a09 	vadd.f32	s17, s6, s18
 80078cc:	ee74 4a82 	vadd.f32	s9, s9, s4
 80078d0:	ee33 9a49 	vsub.f32	s18, s6, s18
 80078d4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80078d8:	ee35 3a85 	vadd.f32	s6, s11, s10
 80078dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80078e0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80078e4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80078e8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80078ec:	ee30 7a68 	vsub.f32	s14, s0, s17
 80078f0:	ee35 8a03 	vadd.f32	s16, s10, s6
 80078f4:	ee38 0a80 	vadd.f32	s0, s17, s0
 80078f8:	ee73 3a82 	vadd.f32	s7, s7, s4
 80078fc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007900:	ed9d 2a00 	vldr	s4, [sp]
 8007904:	eddd 1a01 	vldr	s3, [sp, #4]
 8007908:	ee35 5a43 	vsub.f32	s10, s10, s6
 800790c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007910:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007914:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007918:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800791c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007920:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007924:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007928:	ee39 6a06 	vadd.f32	s12, s18, s12
 800792c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007930:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007934:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007938:	ee22 7a07 	vmul.f32	s14, s4, s14
 800793c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007940:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007944:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007948:	ee31 1a09 	vadd.f32	s2, s2, s18
 800794c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007950:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007954:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007958:	ee37 7a48 	vsub.f32	s14, s14, s16
 800795c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007960:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007964:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007968:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800796c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007970:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007974:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007978:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800797c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007980:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007984:	eddd 5a02 	vldr	s11, [sp, #8]
 8007988:	edc6 fa00 	vstr	s31, [r6]
 800798c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007990:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007994:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007998:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800799c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80079a0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80079a4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80079a8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80079ac:	ee25 6a86 	vmul.f32	s12, s11, s12
 80079b0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80079b4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80079b8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80079bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80079c0:	44f4      	add	ip, lr
 80079c2:	45e2      	cmp	sl, ip
 80079c4:	edc3 3a00 	vstr	s7, [r3]
 80079c8:	edc3 6a01 	vstr	s13, [r3, #4]
 80079cc:	444e      	add	r6, r9
 80079ce:	ed07 1a01 	vstr	s2, [r7, #-4]
 80079d2:	edc7 0a00 	vstr	s1, [r7]
 80079d6:	444b      	add	r3, r9
 80079d8:	ed80 2a00 	vstr	s4, [r0]
 80079dc:	edc0 2a01 	vstr	s5, [r0, #4]
 80079e0:	444f      	add	r7, r9
 80079e2:	edc2 1a00 	vstr	s3, [r2]
 80079e6:	ed82 7a01 	vstr	s14, [r2, #4]
 80079ea:	4448      	add	r0, r9
 80079ec:	ed85 8a00 	vstr	s16, [r5]
 80079f0:	ed85 0a01 	vstr	s0, [r5, #4]
 80079f4:	444a      	add	r2, r9
 80079f6:	edc1 4a00 	vstr	s9, [r1]
 80079fa:	444d      	add	r5, r9
 80079fc:	ed81 3a01 	vstr	s6, [r1, #4]
 8007a00:	edc4 8a00 	vstr	s17, [r4]
 8007a04:	ed84 6a01 	vstr	s12, [r4, #4]
 8007a08:	4449      	add	r1, r9
 8007a0a:	444c      	add	r4, r9
 8007a0c:	f63f aeea 	bhi.w	80077e4 <arm_radix8_butterfly_f32+0x318>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	3308      	adds	r3, #8
 8007a14:	930a      	str	r3, [sp, #40]	; 0x28
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	3308      	adds	r3, #8
 8007a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	3308      	adds	r3, #8
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	9b06      	ldr	r3, [sp, #24]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	9306      	str	r3, [sp, #24]
 8007a2e:	9b05      	ldr	r3, [sp, #20]
 8007a30:	3308      	adds	r3, #8
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	3308      	adds	r3, #8
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a42:	f108 0801 	add.w	r8, r8, #1
 8007a46:	4543      	cmp	r3, r8
 8007a48:	f47f ae72 	bne.w	8007730 <arm_radix8_butterfly_f32+0x264>
 8007a4c:	469b      	mov	fp, r3
 8007a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	46d1      	mov	r9, sl
 8007a56:	930e      	str	r3, [sp, #56]	; 0x38
 8007a58:	e547      	b.n	80074ea <arm_radix8_butterfly_f32+0x1e>
 8007a5a:	b013      	add	sp, #76	; 0x4c
 8007a5c:	ecbd 8b10 	vpop	{d8-d15}
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a64 <memset>:
 8007a64:	4402      	add	r2, r0
 8007a66:	4603      	mov	r3, r0
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d100      	bne.n	8007a6e <memset+0xa>
 8007a6c:	4770      	bx	lr
 8007a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a72:	e7f9      	b.n	8007a68 <memset+0x4>

08007a74 <_reclaim_reent>:
 8007a74:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <_reclaim_reent+0xa8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4283      	cmp	r3, r0
 8007a7a:	b570      	push	{r4, r5, r6, lr}
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	d04b      	beq.n	8007b18 <_reclaim_reent+0xa4>
 8007a80:	69c3      	ldr	r3, [r0, #28]
 8007a82:	b143      	cbz	r3, 8007a96 <_reclaim_reent+0x22>
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d144      	bne.n	8007b14 <_reclaim_reent+0xa0>
 8007a8a:	69e3      	ldr	r3, [r4, #28]
 8007a8c:	6819      	ldr	r1, [r3, #0]
 8007a8e:	b111      	cbz	r1, 8007a96 <_reclaim_reent+0x22>
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 f87f 	bl	8007b94 <_free_r>
 8007a96:	6961      	ldr	r1, [r4, #20]
 8007a98:	b111      	cbz	r1, 8007aa0 <_reclaim_reent+0x2c>
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 f87a 	bl	8007b94 <_free_r>
 8007aa0:	69e1      	ldr	r1, [r4, #28]
 8007aa2:	b111      	cbz	r1, 8007aaa <_reclaim_reent+0x36>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f875 	bl	8007b94 <_free_r>
 8007aaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007aac:	b111      	cbz	r1, 8007ab4 <_reclaim_reent+0x40>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f870 	bl	8007b94 <_free_r>
 8007ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab6:	b111      	cbz	r1, 8007abe <_reclaim_reent+0x4a>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f86b 	bl	8007b94 <_free_r>
 8007abe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ac0:	b111      	cbz	r1, 8007ac8 <_reclaim_reent+0x54>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f866 	bl	8007b94 <_free_r>
 8007ac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007aca:	b111      	cbz	r1, 8007ad2 <_reclaim_reent+0x5e>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f861 	bl	8007b94 <_free_r>
 8007ad2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007ad4:	b111      	cbz	r1, 8007adc <_reclaim_reent+0x68>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f85c 	bl	8007b94 <_free_r>
 8007adc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ade:	b111      	cbz	r1, 8007ae6 <_reclaim_reent+0x72>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 f857 	bl	8007b94 <_free_r>
 8007ae6:	6a23      	ldr	r3, [r4, #32]
 8007ae8:	b1b3      	cbz	r3, 8007b18 <_reclaim_reent+0xa4>
 8007aea:	4620      	mov	r0, r4
 8007aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007af0:	4718      	bx	r3
 8007af2:	5949      	ldr	r1, [r1, r5]
 8007af4:	b941      	cbnz	r1, 8007b08 <_reclaim_reent+0x94>
 8007af6:	3504      	adds	r5, #4
 8007af8:	69e3      	ldr	r3, [r4, #28]
 8007afa:	2d80      	cmp	r5, #128	; 0x80
 8007afc:	68d9      	ldr	r1, [r3, #12]
 8007afe:	d1f8      	bne.n	8007af2 <_reclaim_reent+0x7e>
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 f847 	bl	8007b94 <_free_r>
 8007b06:	e7c0      	b.n	8007a8a <_reclaim_reent+0x16>
 8007b08:	680e      	ldr	r6, [r1, #0]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 f842 	bl	8007b94 <_free_r>
 8007b10:	4631      	mov	r1, r6
 8007b12:	e7ef      	b.n	8007af4 <_reclaim_reent+0x80>
 8007b14:	2500      	movs	r5, #0
 8007b16:	e7ef      	b.n	8007af8 <_reclaim_reent+0x84>
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	bf00      	nop
 8007b1c:	2000005c 	.word	0x2000005c

08007b20 <__errno>:
 8007b20:	4b01      	ldr	r3, [pc, #4]	; (8007b28 <__errno+0x8>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	2000005c 	.word	0x2000005c

08007b2c <__libc_init_array>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	4d0d      	ldr	r5, [pc, #52]	; (8007b64 <__libc_init_array+0x38>)
 8007b30:	4c0d      	ldr	r4, [pc, #52]	; (8007b68 <__libc_init_array+0x3c>)
 8007b32:	1b64      	subs	r4, r4, r5
 8007b34:	10a4      	asrs	r4, r4, #2
 8007b36:	2600      	movs	r6, #0
 8007b38:	42a6      	cmp	r6, r4
 8007b3a:	d109      	bne.n	8007b50 <__libc_init_array+0x24>
 8007b3c:	4d0b      	ldr	r5, [pc, #44]	; (8007b6c <__libc_init_array+0x40>)
 8007b3e:	4c0c      	ldr	r4, [pc, #48]	; (8007b70 <__libc_init_array+0x44>)
 8007b40:	f000 f8a2 	bl	8007c88 <_init>
 8007b44:	1b64      	subs	r4, r4, r5
 8007b46:	10a4      	asrs	r4, r4, #2
 8007b48:	2600      	movs	r6, #0
 8007b4a:	42a6      	cmp	r6, r4
 8007b4c:	d105      	bne.n	8007b5a <__libc_init_array+0x2e>
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
 8007b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b54:	4798      	blx	r3
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7ee      	b.n	8007b38 <__libc_init_array+0xc>
 8007b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5e:	4798      	blx	r3
 8007b60:	3601      	adds	r6, #1
 8007b62:	e7f2      	b.n	8007b4a <__libc_init_array+0x1e>
 8007b64:	080251dc 	.word	0x080251dc
 8007b68:	080251dc 	.word	0x080251dc
 8007b6c:	080251dc 	.word	0x080251dc
 8007b70:	080251e0 	.word	0x080251e0

08007b74 <__retarget_lock_acquire_recursive>:
 8007b74:	4770      	bx	lr

08007b76 <__retarget_lock_release_recursive>:
 8007b76:	4770      	bx	lr

08007b78 <memcpy>:
 8007b78:	440a      	add	r2, r1
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b80:	d100      	bne.n	8007b84 <memcpy+0xc>
 8007b82:	4770      	bx	lr
 8007b84:	b510      	push	{r4, lr}
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	d1f9      	bne.n	8007b86 <memcpy+0xe>
 8007b92:	bd10      	pop	{r4, pc}

08007b94 <_free_r>:
 8007b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d044      	beq.n	8007c24 <_free_r+0x90>
 8007b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9e:	9001      	str	r0, [sp, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ba6:	bfb8      	it	lt
 8007ba8:	18e4      	addlt	r4, r4, r3
 8007baa:	f000 f83f 	bl	8007c2c <__malloc_lock>
 8007bae:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <_free_r+0x94>)
 8007bb0:	9801      	ldr	r0, [sp, #4]
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x30>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bc0:	f000 b83a 	b.w	8007c38 <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x46>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1949      	addeq	r1, r1, r5
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x22>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x50>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x46>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1855      	adds	r5, r2, r1
 8007be8:	42a5      	cmp	r5, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x70>
 8007bec:	6824      	ldr	r4, [r4, #0]
 8007bee:	4421      	add	r1, r4
 8007bf0:	1854      	adds	r4, r2, r1
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x26>
 8007bf8:	681c      	ldr	r4, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	440c      	add	r4, r1
 8007c00:	6014      	str	r4, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x26>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x78>
 8007c06:	230c      	movs	r3, #12
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x26>
 8007c0c:	6825      	ldr	r5, [r4, #0]
 8007c0e:	1961      	adds	r1, r4, r5
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1949      	addeq	r1, r1, r5
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x26>
 8007c24:	b003      	add	sp, #12
 8007c26:	bd30      	pop	{r4, r5, pc}
 8007c28:	2000a564 	.word	0x2000a564

08007c2c <__malloc_lock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	; (8007c34 <__malloc_lock+0x8>)
 8007c2e:	f7ff bfa1 	b.w	8007b74 <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	2000a560 	.word	0x2000a560

08007c38 <__malloc_unlock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__malloc_unlock+0x8>)
 8007c3a:	f7ff bf9c 	b.w	8007b76 <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	2000a560 	.word	0x2000a560

08007c44 <sqrtf>:
 8007c44:	b508      	push	{r3, lr}
 8007c46:	ed2d 8b02 	vpush	{d8}
 8007c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007c4e:	f000 f817 	bl	8007c80 <__ieee754_sqrtf>
 8007c52:	eeb4 8a48 	vcmp.f32	s16, s16
 8007c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5a:	d60c      	bvs.n	8007c76 <sqrtf+0x32>
 8007c5c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007c7c <sqrtf+0x38>
 8007c60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c68:	d505      	bpl.n	8007c76 <sqrtf+0x32>
 8007c6a:	f7ff ff59 	bl	8007b20 <__errno>
 8007c6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007c72:	2321      	movs	r3, #33	; 0x21
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	ecbd 8b02 	vpop	{d8}
 8007c7a:	bd08      	pop	{r3, pc}
 8007c7c:	00000000 	.word	0x00000000

08007c80 <__ieee754_sqrtf>:
 8007c80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007c84:	4770      	bx	lr
	...

08007c88 <_init>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr

08007c94 <_fini>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr
